Eksport struktury katalogÛw i plikÛw
Wygenerowano: 06/11/2025 19:06:14



åCIEØKA: README.md
---------------------
Projekt Wybor√≥w



åCIEØKA: wyniki.csv
----------------------
Kandydat;Liczba g≥osÛw
Jan Kowalski;8
Anna Nowak;2
Jan Tarczynski;1



åCIEØKA: .mvn\wrapper\maven-wrapper.properties
-------------------------------------------------
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.5/apache-maven-3.8.5-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar


åCIEØKA: src\main\java\module-info.java
------------------------------------------
module com.election {
    requires java.naming;
    requires javafx.controls;
    requires javafx.fxml;
    requires java.sql;
//    requires javafx.web;
//
//    requires org.controlsfx.controls;
//    requires com.dlsc.formsfx;
//    requires net.synedra.validatorfx;
//    requires org.kordamp.ikonli.javafx;
//    requires org.kordamp.bootstrapfx.core;
//    requires eu.hansolo.tilesfx;
//    requires com.almasb.fxgl.all;
    //requires java.persistence;
    requires jbcrypt;
    requires org.hibernate.orm.core;
    requires org.slf4j;
    requires jakarta.persistence;
    requires com.github.librepdf.openpdf;

    exports com.election;
    opens com.election to javafx.fxml;
    exports com.election.controller;
    opens com.election.controller to javafx.fxml;
    opens com.election.util to org.hibernate.orm.core; // Je≈õli HibernateUtil jest w pakiecie util
    opens com.election.model to org.hibernate.orm.core, javafx.base;
}



åCIEØKA: src\main\java\com\election\HashGenerator.java
---------------------------------------------------------
package com.election;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.Clipboard;
import javafx.scene.input.ClipboardContent;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.mindrot.jbcrypt.BCrypt;

public class HashGenerator extends Application {
    private Stage parentStage;

    public void setParentStage(Stage parentStage) {
        this.parentStage = parentStage;
    }

    @Override
    public void start(Stage stage) {
        VBox root = new VBox(20);
        root.setPadding(new Insets(20));
        root.setAlignment(Pos.CENTER);

        Label titleLabel = new Label("Generator Hashy BCrypt");
        TextField passwordField = new TextField();
        passwordField.setPromptText("Wprowad≈∫ has≈Ço");
        passwordField.setMaxWidth(300);

        TextField hashField = new TextField();
        hashField.setPromptText("Wygenerowany hash");
        hashField.setMaxWidth(300);
        hashField.setEditable(false);

        Button generateBtn = new Button("Generuj Hash");
        Button copyBtn = new Button("Kopiuj do schowka");

        generateBtn.setOnAction(e -> {
            String password = passwordField.getText();
            if (!password.isEmpty()) {
                String hash = BCrypt.hashpw(password, BCrypt.gensalt());
                hashField.setText(hash);
            }
        });

        copyBtn.setOnAction(e -> {
            if (!hashField.getText().isEmpty()) {
                Clipboard clipboard = Clipboard.getSystemClipboard();
                ClipboardContent content = new ClipboardContent();
                content.putString(hashField.getText());
                clipboard.setContent(content);
            }
        });

        Button backButton = new Button("‚Üê Powr√≥t do panelu admina");
        backButton.setOnAction(e -> {
            if (parentStage != null) {
                parentStage.show();
            }
            stage.close();
        });

        root.getChildren().addAll(
                titleLabel,
                passwordField,
                hashField,
                generateBtn,
                copyBtn,
                backButton
        );

        Scene scene = new Scene(root, 400, 300);
        stage.setTitle("Generator Hashy BCrypt");
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}


åCIEØKA: src\main\java\com\election\Main.java
------------------------------------------------
package com.election;

import com.election.util.DataInitializer;
import com.election.util.HibernateUtil;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;
import org.hibernate.Session;

import java.net.URL;

public class Main extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {
        // Inicjalizacja Hibernate i danych startowych
        initializeHibernate();

        // Za≈Çaduj GUI (login.fxml)
        URL url = getClass().getResource("/com/election/view/login.fxml");
        if (url == null) {
            throw new IllegalStateException("Nie znaleziono pliku FXML: login.fxml");
        }

        Parent root = FXMLLoader.load(url);
        Scene scene = new Scene(root);

        primaryStage.setTitle("System g≈Çosowania");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void initializeHibernate() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();

        DataInitializer.initializeIfEmpty(session);

        session.getTransaction().commit();
        session.close();

    }

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void stop() {
        HibernateUtil.shutdown();
        System.out.println("Aplikacja zosta≈Ça zamkniƒôta");
    }
}


åCIEØKA: src\main\java\com\election\controller\AdminController.java
----------------------------------------------------------------------
package com.election.controller;

import com.election.HashGenerator;
import com.election.dao.CandidateDAO;
import com.election.dao.UserDAO;
import com.election.model.CandidateResult;
import com.election.model.User;
import com.election.service.ElectionService;
import com.election.service.ExportServicePDF;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.layout.GridPane;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import org.mindrot.jbcrypt.BCrypt;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

public class AdminController {
    private final CandidateDAO candidateDAO = new CandidateDAO();
    private final UserDAO userDAO = new UserDAO();
    private final ElectionService electionService = new ElectionService();
    private final ObservableList<CandidateResult> candidatesData = FXCollections.observableArrayList();
    private User currentAdmin;
    private User currentEditUser;

    @FXML private TableView<User> usersTable;
    @FXML private TableColumn<User, Long> idColumn;
    @FXML private TableColumn<User, String> usernameColumn;
    @FXML private TableColumn<User, String> roleColumn;
    @FXML private TableColumn<User, String> firstNameColumn;
    @FXML private TableColumn<User, String> lastNameColumn;
    @FXML private TableColumn<User, String> peselColumn;
    @FXML private GridPane userFormGrid;
    @FXML private GridPane identifierGrid;
    @FXML private TextField firstNameField;
    @FXML private TextField lastNameField;
    @FXML private TextField peselField;
    @FXML private TextField usernameField;
    @FXML private PasswordField passwordField;
    @FXML private ComboBox<String> roleComboBox;
    @FXML private TableView<CandidateResult> resultsTable;
    @FXML private TableColumn<CandidateResult, String> candidateColumn;
    @FXML private TableColumn<CandidateResult, Number> votesColumn;

    @FXML private BarChart<String, Number> resultsChart;
    @FXML private CategoryAxis xAxis;
    @FXML private NumberAxis yAxis;

    @FXML private Label statusLabel;
    @FXML private TextField peselSearchField;

    // Pola dla uniwersalnego zarzƒÖdzania u≈ºytkownikami
    @FXML private ComboBox<String> actionComboBox;
    @FXML private TextField identifierField;
    @FXML private Button actionButton;
    @FXML private Label userManagementStatus;

    private ObservableList<User> masterUserList = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        configureUserTable();
        configureResultsTable();
        loadInitialData();

        // Inicjalizacja ComboBox z rolami
        roleComboBox.setItems(FXCollections.observableArrayList("USER", "ADMIN"));

        // Listener dla ComboBox akcji
        actionComboBox.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {
            if (newVal == null) return;

            switch (newVal) {
                case "Dodaj u≈ºytkownika":
                    userFormGrid.setVisible(true);
                    identifierGrid.setVisible(false);
                    actionButton.setText("Dodaj");
                    clearUserForm();
                    break;

                case "Edytuj u≈ºytkownika":
                    userFormGrid.setVisible(true);
                    identifierGrid.setVisible(true);
                    actionButton.setText("Wyszukaj");
                    clearUserForm();
                    break;

                case "Usu≈Ñ u≈ºytkownika":
                    userFormGrid.setVisible(false);
                    identifierGrid.setVisible(true);
                    actionButton.setText("Usu≈Ñ");
                    break;
            }
        });
    }
    private void clearUserForm() {
        firstNameField.clear();
        lastNameField.clear();
        peselField.clear();
        usernameField.clear();
        passwordField.clear();
        roleComboBox.getSelectionModel().clearSelection();
        currentEditUser = null; // Resetuj przy czyszczeniu formularza
    }

    @FXML
    private void handleUserManagement() {
        String action = actionComboBox.getValue();

        switch (action) {
            case "Dodaj u≈ºytkownika":
                addNewUser();
                break;

            case "Edytuj u≈ºytkownika":
                if (actionButton.getText().equals("Wyszukaj")) {
                    findUserForEdit();
                } else {
                    updateUser();
                }
                break;

            case "Usu≈Ñ u≈ºytkownika":
                deleteUser();
                break;
        }
    }

    private void deleteUser() {
        String identifier = identifierField.getText().trim();
        if (identifier.isEmpty()) {
            userManagementStatus.setText("Wprowad≈∫ ID lub PESEL!");
            return;
        }

        User user = findUserByIdentifier(identifier);
        if (user == null) {
            userManagementStatus.setText("Nie znaleziono u≈ºytkownika!");
            return;
        }

        // Potwierdzenie przed usuniƒôciem
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Potwierdzenie usuniƒôcia");
        alert.setHeaderText("Czy na pewno chcesz usunƒÖƒá u≈ºytkownika?");
        alert.setContentText(user.getFirstName() + " " + user.getLastName() + " (" + user.getUsername() + ")");

        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            try {
                userDAO.deleteUser(user);
                masterUserList.remove(user);
                refreshUserTable();
                userManagementStatus.setText("U≈ºytkownik usuniƒôty pomy≈õlnie!");
            } catch (Exception e) {
                userManagementStatus.setText("B≈ÇƒÖd: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            userManagementStatus.setText("Anulowano usuwanie.");
        }
    }
    private void addNewUser() {
        // Walidacja danych
        if (!validateUserForm()) return;

        // Tworzenie nowego u≈ºytkownika
        User newUser = new User();
        newUser.setFirstName(firstNameField.getText().trim());
        newUser.setLastName(lastNameField.getText().trim());
        newUser.setPesel(peselField.getText().trim());
        newUser.setUsername(usernameField.getText().trim());
        newUser.setPassword(BCrypt.hashpw(passwordField.getText(), BCrypt.gensalt()));
        newUser.setRole(roleComboBox.getValue());
        newUser.setHasVoted(false);

        try {
            userDAO.saveUser(newUser);
            masterUserList.add(newUser);
            refreshUserTable();
            userManagementStatus.setText("U≈ºytkownik dodany pomy≈õlnie!");
            clearUserForm();
        } catch (Exception e) {
            userManagementStatus.setText("B≈ÇƒÖd: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void findUserForEdit() {
        String identifier = identifierField.getText().trim();
        //User user = findUserByIdentifier(identifier);
        currentEditUser = findUserByIdentifier(identifier);

        if (currentEditUser != null) {
            // Wype≈Çnij formularz danymi u≈ºytkownika
            firstNameField.setText(currentEditUser.getFirstName());
            lastNameField.setText(currentEditUser.getLastName());
            peselField.setText(currentEditUser.getPesel());
            usernameField.setText(currentEditUser.getUsername());
            roleComboBox.setValue(currentEditUser.getRole());

            // Przygotuj do aktualizacji
            actionButton.setText("Zaktualizuj");
            userManagementStatus.setText("Znaleziono u≈ºytkownika. Edytuj dane.");
        } else {
            userManagementStatus.setText("Nie znaleziono u≈ºytkownika!");
        }
    }

    private void updateUser() {
        String identifier = identifierField.getText().trim();
        User user = findUserByIdentifier(identifier);

        if (user == null) {
            userManagementStatus.setText("Nie znaleziono u≈ºytkownika!");
            return;
        }

        // Aktualizuj dane
        user.setFirstName(firstNameField.getText().trim());
        user.setLastName(lastNameField.getText().trim());
        user.setPesel(peselField.getText().trim());
        user.setUsername(usernameField.getText().trim());

        // Aktualizuj has≈Ço tylko je≈õli zosta≈Ço zmienione
        if (!passwordField.getText().isEmpty()) {
            user.setPassword(BCrypt.hashpw(passwordField.getText(), BCrypt.gensalt()));
        }

        user.setRole(roleComboBox.getValue());

        try {
            userDAO.updateUser(user);
            usersTable.refresh();
            refreshUserTable();
            userManagementStatus.setText("Dane u≈ºytkownika zaktualizowane!");
            actionButton.setText("Wyszukaj"); // Przywr√≥ƒá stan poczƒÖtkowy
            clearUserForm();
        } catch (Exception e) {
            userManagementStatus.setText("B≈ÇƒÖd: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private boolean validateUserForm() {
        if (firstNameField.getText().trim().isEmpty() ||
                lastNameField.getText().trim().isEmpty() ||
                peselField.getText().trim().isEmpty() ||
                usernameField.getText().trim().isEmpty() ||
                roleComboBox.getValue() == null) {

            userManagementStatus.setText("Wype≈Çnij wszystkie pola!");
            return false;
        }

        // Walidacja PESEL
        String pesel = peselField.getText().trim();
        if (!pesel.matches("\\d{11}")) {
            userManagementStatus.setText("PESEL musi mieƒá 11 cyfr!");
            return false;
        }
        // Sprawdzenie unikalno≈õci PESEL
        User existing = userDAO.findByPesel(pesel);
        if (existing != null) {
            if (currentEditUser == null || !existing.getId().equals(currentEditUser.getId())) {
                userManagementStatus.setText("PESEL ju≈º istnieje w systemie!");
                return false;
            }
        }
        // Walidacja imienia
        if (!firstNameField.getText().trim().matches("[\\p{L}\\s\\-]+")) {
            userManagementStatus.setText("Imiƒô mo≈ºe zawieraƒá tylko litery, spacje i my≈õlniki!");
            return false;
        }

        // Walidacja nazwiska
        if (!lastNameField.getText().trim().matches("[\\p{L}\\s\\-]+")) {
            userManagementStatus.setText("Nazwisko mo≈ºe zawieraƒá tylko litery, spacje i my≈õlniki!");
            return false;
        }

        // Walidacja loginu
        if (!usernameField.getText().trim().matches("[a-zA-Z0-9_]+")) {
            userManagementStatus.setText("Login mo≈ºe zawieraƒá tylko litery, cyfry i podkre≈õlniki!");
            return false;
        }

        return true;
    }
    private void refreshUserTable() {
        masterUserList.setAll(userDAO.getAllUsers());
        usersTable.refresh();
    }
    private void configureUserTable() {
        idColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
        usernameColumn.setCellValueFactory(new PropertyValueFactory<>("username"));
        roleColumn.setCellValueFactory(new PropertyValueFactory<>("role"));
        firstNameColumn.setCellValueFactory(new PropertyValueFactory<>("firstName"));
        lastNameColumn.setCellValueFactory(new PropertyValueFactory<>("lastName"));
        peselColumn.setCellValueFactory(new PropertyValueFactory<>("pesel"));
    }

    private void configureResultsTable() {
        candidateColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        votesColumn.setCellValueFactory(new PropertyValueFactory<>("votes"));

        votesColumn.setCellFactory(tc -> new TableCell<>() {
            @Override
            protected void updateItem(Number value, boolean empty) {
                super.updateItem(value, empty);
                setText(empty || value == null ? "" : String.format("%,d", value.intValue()));
            }
        });
    }

    private void loadInitialData() {
        masterUserList.setAll(userDAO.getAllUsers());
        usersTable.setItems(masterUserList);
        refreshUserTable();
        refreshElectionData();
    }

    public void initializeWithUser(User adminUser) {
        this.currentAdmin = adminUser;
        logAdminAccess();
    }

    private void logAdminAccess() {
        System.out.println("Administrator " + currentAdmin.getUsername()
                + " zalogowany o " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss")));
    }

    @FXML
    private void refreshResults(ActionEvent event) {
        refreshElectionData();
    }

    private void refreshElectionData() {
        statusLabel.setText("Od≈õwie≈ºanie wynik√≥w...");

        try {
            List<CandidateResult> results = electionService.getCurrentResults();
            candidatesData.setAll(results);
            resultsTable.setItems(candidatesData);

            resultsChart.getData().clear();
            XYChart.Series<String, Number> series = new XYChart.Series<>();
            int maxVotes = 0;

            for (CandidateResult result : results) {
                int votes = result.getVotes();
                series.getData().add(new XYChart.Data<>(result.getName(), votes));
                if (votes > maxVotes) maxVotes = votes;
            }
            resultsChart.getData().add(series);
            updateYAxisRange(maxVotes);

            statusLabel.setText("Wyniki zaktualizowane: " +
                    LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss")));
        } catch (Exception e) {
            statusLabel.setText("B≈ÇƒÖd podczas aktualizacji!");
            e.printStackTrace();
        }
    }

    private void updateYAxisRange(int maxVotes) {
        yAxis.setAutoRanging(false);
        yAxis.setLowerBound(0);
        yAxis.setUpperBound(maxVotes < 5 ? 5 : maxVotes + 1);
        yAxis.setTickUnit(1);
        yAxis.setMinorTickVisible(false);
    }

    @FXML
    private void handleLogout(ActionEvent event) {
        try {
            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            currentStage.close();

            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/election/view/login.fxml"));
            Stage loginStage = new Stage();
            loginStage.setScene(new Scene(loader.load()));
            loginStage.setTitle("Logowanie");
            loginStage.show();
        } catch (IOException e) {
            showErrorAlert("B≈ÇƒÖd logowania", e.getMessage());
        }
    }

    @FXML
    private void handleOpenHashGenerator(ActionEvent event) {
        try {
            Stage adminStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Stage hashStage = new Stage();
            HashGenerator hashGenerator = new HashGenerator();
            hashGenerator.setParentStage(adminStage);
            hashGenerator.start(hashStage);
        } catch (Exception e) {
            showErrorAlert("B≈ÇƒÖd generatora", e.getMessage());
        }
    }

    private void showErrorAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void handleAddUser() {
        userManagementStatus.setText("Dodawanie u≈ºytkownika...");

        User newUser = new User();
        newUser.setUsername("user_" + System.currentTimeMillis());
        newUser.setPassword("password");
        newUser.setRole("USER");
        newUser.setFirstName("Nowy");
        newUser.setLastName("U≈ºytkownik");
        newUser.setPesel("00000000000");

        try {
            userDAO.saveUser(newUser);
            masterUserList.add(newUser);
            userManagementStatus.setText("U≈ºytkownik dodany pomy≈õlnie!");
        } catch (Exception e) {
            userManagementStatus.setText("B≈ÇƒÖd: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void handleEditUser(String identifier) {
        userManagementStatus.setText("Edytowanie u≈ºytkownika...");
        User user = findUserByIdentifier(identifier);

        if (user == null) {
            userManagementStatus.setText("Nie znaleziono u≈ºytkownika!");
            return;
        }

        user.setLastName(user.getLastName() + " (Edytowany)");

        try {
            userDAO.updateUser(user);
            usersTable.refresh();
            userManagementStatus.setText("U≈ºytkownik zaktualizowany!");
        } catch (Exception e) {
            userManagementStatus.setText("B≈ÇƒÖd: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void handleDeleteUser(String identifier) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Potwierdzenie usuniƒôcia");
        alert.setHeaderText("Czy na pewno chcesz usunƒÖƒá u≈ºytkownika?");
        alert.setContentText("Identyfikator: " + identifier);

        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            userManagementStatus.setText("Usuwanie u≈ºytkownika...");
            User user = findUserByIdentifier(identifier);

            if (user == null) {
                userManagementStatus.setText("Nie znaleziono u≈ºytkownika!");
                return;
            }

            try {
                userDAO.deleteUser(user);
                masterUserList.remove(user);
                refreshUserTable();
                userManagementStatus.setText("U≈ºytkownik usuniƒôty pomy≈õlnie!");
            } catch (Exception e) {
                userManagementStatus.setText("B≈ÇƒÖd: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            userManagementStatus.setText("Anulowano usuwanie.");
        }
    }

    private User findUserByIdentifier(String identifier) {
        if (identifier == null || identifier.isEmpty()) return null;
        try {
            if (identifier.matches("\\d{11}")) {
                return userDAO.findByPesel(identifier);
            } else if (identifier.matches("\\d+")) {
                Long id = Long.parseLong(identifier);
                return userDAO.getUserById(id);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    @FXML
    private void handlePeselSearch() {
        String pesel = peselSearchField.getText().trim();
        if (pesel.isEmpty()) {
            usersTable.setItems(masterUserList);
            return;
        }

        ObservableList<User> filtered = masterUserList.filtered(user ->
                user.getPesel() != null && user.getPesel().contains(pesel)
        );
        usersTable.setItems(filtered);
    }

    @FXML
    private void handleShowAllUsers() {
        usersTable.setItems(masterUserList);
        peselSearchField.clear();
    }

    @FXML
    private void handleExportToCSV() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Zapisz plik CSV");
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("CSV files (*.csv)", "*.csv"));
        File file = fileChooser.showSaveDialog(resultsTable.getScene().getWindow());

        if (file != null) {
            try (OutputStreamWriter writer = new OutputStreamWriter(
                    new FileOutputStream(file), StandardCharsets.UTF_8)) {

                writer.write('\uFEFF'); // BOM dla UTF-8
                writer.write("Kandydat;Liczba g≈Ços√≥w\n");

                for (CandidateResult result : resultsTable.getItems()) {
                    writer.write(result.getName() + ";" + result.getVotes() + "\n");
                }

                writer.flush();
            } catch (IOException e) {
                showError("B≈ÇƒÖd zapisu CSV: " + e.getMessage());
            }
        }
    }

    @FXML
    private void handleExportToPDF() {
        try {
            ExportServicePDF.exportToPDF(candidateDAO.getAllCandidates(), "wyniki.pdf");
            statusLabel.setText("Zapisano wyniki do PDF");
        } catch (Exception e) {
            statusLabel.setText("B≈ÇƒÖd eksportu do PDF");
            e.printStackTrace();
        }
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("B≈ÇƒÖd");
        alert.setHeaderText("WystƒÖpi≈Ç b≈ÇƒÖd");
        alert.setContentText(message);
        alert.showAndWait();
    }
}


åCIEØKA: src\main\java\com\election\controller\LoginController.java
----------------------------------------------------------------------
package com.election.controller;

import com.election.dao.UserDAO;
import com.election.model.User;
import com.election.service.AuthService;
import javafx.animation.PauseTransition;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import javafx.util.Duration;
import org.mindrot.jbcrypt.BCrypt;

import java.io.IOException;

public class LoginController {

    @FXML private TextField usernameField;
    @FXML private PasswordField passwordField;
    @FXML private Label errorLabel;
    @FXML private Label statusLabel;

    private final UserDAO userDAO = new UserDAO();
    private final AuthService authService = new AuthService();

    @FXML
    private void initialize() {
        loadUserCountAsync();
    }

    private void loadUserCountAsync() {
        Task<Integer> task = new Task<>() {
            @Override
            protected Integer call() {
                return userDAO.getAllUsers().size();
            }
        };

//        task.setOnSucceeded(e -> {
//            if (task.getValue() > 0) {
//                statusLabel.setText("Zarejestrowanych u≈ºytkownik√≥w: " + task.getValue());
//            } else {
//                statusLabel.setText("Brak zarejestrowanych u≈ºytkownik√≥w");
//            }
//        });

        new Thread(task).start();
    }

    @FXML
    private void handleLogin(ActionEvent event) {
        performLogin();
    }

    private void performLogin() {
        String username = usernameField.getText().trim();
        String password = passwordField.getText().trim();

        if (username.isEmpty() || password.isEmpty()) {
            showError("Proszƒô wype≈Çniƒá wszystkie pola!");
            return;
        }

        Task<AuthService.AuthResult> loginTask = new Task<>() {
            @Override
            protected AuthService.AuthResult call() {
                return authService.authenticate(username, password);
            }
        };

        loginTask.setOnSucceeded(e -> {
            AuthService.AuthResult result = loginTask.getValue();
            switch (result.getStatus()) {
                case SUCCESS:
                    redirectUser(result.getUser());
                    break;
                case USER_NOT_FOUND:
                    showError("Nieprawid≈Çowy login!");
                    break;
                case INVALID_PASSWORD:
                    showError("Nieprawid≈Çowe has≈Ço!");
                    break;
            }
        });

        loginTask.setOnFailed(e -> {
            showError("B≈ÇƒÖd po≈ÇƒÖczenia z bazƒÖ danych");
        });

        new Thread(loginTask).start();
    }

    private void redirectUser(User user) {
        try {
            String fxmlPath = user.getRole().equals("ADMIN")
                    ? "/com/election/view/admin_view.fxml"
                    : "/com/election/view/user_view.fxml";

            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();

            if (user.getRole().equals("ADMIN")) {
                AdminController controller = loader.getController();
                controller.initializeWithUser(user);
            } else {
                UserController controller = loader.getController();
                controller.initializeWithUser(user); // Przeka≈º u≈ºytkownika
            }

            Stage stage = (Stage) usernameField.getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.centerOnScreen();

        } catch (IOException ex) {
            ex.printStackTrace();
            showError("B≈ÇƒÖd ≈Çadowania widoku");
        }
    }

    private void showError(String message) {
        errorLabel.setText(message);
        errorLabel.setStyle("-fx-text-fill: #ff4444;");
    }

    @FXML
    private void handleRefresh(ActionEvent event) {
        usernameField.clear();
        passwordField.clear();
        errorLabel.setText("");
    }
}


åCIEØKA: src\main\java\com\election\controller\UserController.java
---------------------------------------------------------------------
package com.election.controller;

import com.election.dao.CandidateDAO;
import com.election.exception.VotingException;
import com.election.model.Candidate;
import com.election.model.CandidateResult;
import com.election.model.User;
import com.election.service.ElectionService;
import com.election.service.VotingService;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import javafx.util.StringConverter;

import java.io.IOException;
import java.util.List;

public class UserController {
    private User currentUser;
    private final VotingService votingService = new VotingService();
    @FXML
    private Label statusLabel;

    @FXML
    private ComboBox<Candidate> candidateComboBox;

    private final ElectionService electionService = new ElectionService();

    @FXML
    public void initialize() { // Ta metoda jest wywo≈Çywana automatycznie
        loadCandidates();
    }
    public void initializeWithUser(User user) {
        this.currentUser = user;

        if(user.isHasVoted()) {
            submitButton.setDisable(true);
            candidateComboBox.setDisable(true);
            statusLabel.setText("Ju≈º odda≈Çe≈õ g≈Ços w tych wyborach!");
            statusLabel.setStyle("-fx-text-fill: #2ecc71;");
        }
    }

    private void refreshVotingStatus() {
        if (currentUser != null && currentUser.isHasVoted()) {  // U≈ºyj metody dostƒôpu
            submitButton.setDisable(true);
            candidateComboBox.setDisable(true);
            statusLabel.setText("Ju≈º odda≈Çe≈õ g≈Ços! Mo≈ºesz siƒô wylogowaƒá.");
        }
    }

    @FXML
    private void handleVoteSubmit(ActionEvent event) {
        Candidate selectedCandidate = candidateComboBox.getValue(); // <- tu masz selectedCandidate

        if (selectedCandidate == null) {
            statusLabel.setText("Wybierz kandydata przed oddaniem g≈Çosu!");
            return;
        }

        votingService.castVote(currentUser, selectedCandidate); // <- przekazujesz dalej

        submitButton.setDisable(true);
        candidateComboBox.setDisable(true);
        statusLabel.setText("G≈Ços zosta≈Ç pomy≈õlnie zarejestrowany!");
        statusLabel.setStyle("-fx-text-fill: #2ecc71;");
    }

    private void loadCandidates() {
        List<Candidate> candidates = electionService.getAllCandidates();
        candidateComboBox.getItems().setAll(candidates); // U≈ºyj setAll() zamiast addAll()
    }

    @FXML private Button submitButton;
    @FXML private Button logoutButton;

    @FXML
    private void handleLogout(ActionEvent event) {
        try {
            // Zamknij obecne okno
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            stage.close();

            // Otw√≥rz nowe okno logowania
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/election/view/login.fxml"));
            Parent root = loader.load();
            Stage loginStage = new Stage();
            loginStage.setScene(new Scene(root));
            loginStage.setTitle("Logowanie");
            loginStage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


åCIEØKA: src\main\java\com\election\dao\CandidateDAO.java
------------------------------------------------------------
package com.election.dao;

import com.election.model.Candidate;
import com.election.util.HibernateUtil;
import org.hibernate.Session;
import org.hibernate.Transaction;

import java.util.List;

public class CandidateDAO {

    // Pobierz wszystkich kandydat√≥w
    public List<Candidate> getAllCandidates() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.createQuery("FROM Candidate", Candidate.class).list();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    // Dodaj nowego kandydata
    public void addCandidate(Candidate candidate) {
        Transaction transaction = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            transaction = session.beginTransaction();
            session.persist(candidate);
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) transaction.rollback();
            e.printStackTrace();
        }
    }

    // Usu≈Ñ kandydata po ID
    public void deleteCandidate(Long id) {
        Transaction transaction = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            transaction = session.beginTransaction();
            Candidate candidate = session.get(Candidate.class, id);
            if (candidate != null) {
                session.remove(candidate);
            }
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) transaction.rollback();
            e.printStackTrace();
        }
    }

    // Zaktualizuj dane kandydata
    public void updateCandidate(Candidate candidate) {
        Transaction transaction = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            transaction = session.beginTransaction();
            session.merge(candidate);
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) transaction.rollback();
            e.printStackTrace();
        }
    }

    // Pobierz kandydata po ID
    public Candidate getCandidateById(Long id) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.get(Candidate.class, id);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}



åCIEØKA: src\main\java\com\election\dao\ElectionResultDAO.java
-----------------------------------------------------------------
package com.election.dao;

import com.election.model.ElectionResult;
import com.election.util.HibernateUtil;
import org.hibernate.Session;
import org.hibernate.Transaction;

import java.util.List;

public class ElectionResultDAO {

    public ElectionResult findByCandidate(String candidate) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.createQuery(
                            "FROM ElectionResult WHERE candidateName = :candidate",
                            ElectionResult.class
                    )
                    .setParameter("candidate", candidate)
                    .uniqueResult();
        }
    }

    public void saveOrUpdate(ElectionResult result) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            Transaction transaction = session.beginTransaction();
            session.merge(result); // U≈ºywamy merge zamiast save/update
            transaction.commit();
        }
    }

    // Pozosta≈Çe metody
    public void addResult(ElectionResult result) {
        saveOrUpdate(result);
    }

    public List<ElectionResult> getAllResults() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.createQuery("FROM ElectionResult", ElectionResult.class).list();
        }
    }
}


åCIEØKA: src\main\java\com\election\dao\UserDAO.java
-------------------------------------------------------
package com.election.dao;

import com.election.model.User;
import com.election.util.HibernateUtil;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;

import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

public class UserDAO {

    public List<User> getAllUsers() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            List<User> users = session.createQuery("FROM User", User.class).list();
            System.out.println("DEBUG: Znaleziono u≈ºytkownik√≥w: " + users.size());
            users.forEach(u -> System.out.println(u.getUsername() + " | " + u.isHasVoted()));
            return users;
        } catch (Exception e) {
            System.err.println("B≈ÇƒÖd pobierania u≈ºytkownik√≥w:");
            e.printStackTrace();
            return List.of(); // Zwr√≥ƒá pustƒÖ listƒô w razie b≈Çƒôdu
        }
    }
    public User getUserById(Long id) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.get(User.class, id);
        } catch (Exception e) {
            System.err.println("B≈ÇƒÖd pobierania u≈ºytkownika o ID: " + id);
            e.printStackTrace();
            return null;
        }
    }

    public void updateUser(User user) {
        Transaction transaction = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            transaction = session.beginTransaction();
            session.update(user);
            transaction.commit();
            System.out.println("Zaktualizowano u≈ºytkownika: " + user.getUsername());

            // Aktualizacja backupu
            appendUserToSql(user);  // Mo≈ºesz to zostawiƒá lub pominƒÖƒá przy aktualizacji

        } catch (Exception e) {
            if (transaction != null) transaction.rollback();
            System.err.println("B≈ÇƒÖd aktualizacji u≈ºytkownika:");
            e.printStackTrace();
        }
    }

    public void deleteUser(User user) {
        Transaction transaction = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            transaction = session.beginTransaction();
            session.delete(user);
            transaction.commit();
            System.out.println("Usuniƒôto u≈ºytkownika: " + user.getUsername());
        } catch (Exception e) {
            if (transaction != null) transaction.rollback();
            System.err.println("B≈ÇƒÖd usuwania u≈ºytkownika:");
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }


    public void saveUser(User user) {
        Transaction transaction = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            transaction = session.beginTransaction();
            session.save(user);
            transaction.commit();
            session.close();
            // Dodajemy kopiƒô zapasowƒÖ
            appendUserToSql(user);

        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            e.printStackTrace();
        }
    }
    public static void appendUserToSql(User user) {
        String filePath = "src/main/resources/import_dynamic.sql";  // <-- zapis do resources (dev-only)

        // Sk≈Çadnia SQL INSERT
        String insert = String.format(
                "INSERT INTO USERS (id, username, password, role, has_voted) VALUES (%d, '%s', '%s', '%s', %b);%n",
                user.getId(),
                user.getUsername(),
                user.getPassword(),
                user.getRole(),
                user.isHasVoted()
        );

        try (FileWriter fw = new FileWriter(filePath, true)) {
            fw.write(insert);
        } catch (IOException e) {
            e.printStackTrace(); // tylko IO
        }
    }

    public User findByUsername(String username) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.createQuery("FROM User WHERE username = :username", User.class)
                    .setParameter("username", username)
                    .uniqueResult();
        }
    }
    public User findByPesel(String pesel) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.createQuery("FROM User WHERE pesel = :pesel", User.class)
                    .setParameter("pesel", pesel)
                    .uniqueResult();
        }
    }


    public boolean isAdmin(User user) {
        return "ADMIN".equals(user.getRole());
    }
}



åCIEØKA: src\main\java\com\election\exception\VotingException.java
---------------------------------------------------------------------
package com.election.exception;

public class VotingException extends Exception {
    public VotingException(String message) {
        super(message);
    }
}


åCIEØKA: src\main\java\com\election\model\Candidate.java
-----------------------------------------------------------
package com.election.model;

import javafx.beans.property.*;
import jakarta.persistence.*;

@Entity
@Table(name = "CANDIDATE")
public class Candidate {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    private String party;

    @Column(nullable = false)
    private int votes;

    // Transient properties dla JavaFX
    private transient StringProperty nameProperty;
    private transient IntegerProperty votesProperty;

    // Konstruktory
    public Candidate() {
        // Domy≈õlny konstruktor dla JPA
    }

    public Candidate(String name, String party, int votes) {
        this.name = name;
        this.party = party;
        this.votes = votes;
        initializeProperties();
    }

    // Inicjalizacja w≈Ça≈õciwo≈õci JavaFX
    private void initializeProperties() {
        this.nameProperty = new SimpleStringProperty(name);
        this.votesProperty = new SimpleIntegerProperty(votes);
    }

    // Gettery i settery dla JPA
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
        if (nameProperty != null) {
            nameProperty.set(name);
        }
    }

    public String getParty() {
        return party;
    }

    public void setParty(String party) {
        this.party = party;
    }

    public int getVotes() {
        return votes;
    }

    public void setVotes(int votes) {
        this.votes = votes;
        if (votesProperty != null) {
            votesProperty.set(votes);
        }
    }

    // W≈Ça≈õciwo≈õci JavaFX
    public StringProperty nameProperty() {
        if (nameProperty == null) {
            nameProperty = new SimpleStringProperty(name);
        }
        return nameProperty;
    }

    public IntegerProperty votesProperty() {
        if (votesProperty == null) {
            votesProperty = new SimpleIntegerProperty(votes);
        }
        return votesProperty;
    }

    @Override
    public String toString() {
        return name + (party != null ? " (" + party + ")" : "");
    }
}


åCIEØKA: src\main\java\com\election\model\CandidateResult.java
-----------------------------------------------------------------
package com.election.model;

public class CandidateResult {
    private Long id;          // Dodano pole id
    private String name;      // Zmieniono candidateName ‚Üí name
    private String party;
    private int votes;

    // Konstruktor z 4 parametrami (id, name, party, votes)
    public CandidateResult(Long id, String name, String party, int votes) {
        this.id = id;
        this.name = name;
        this.party = party;
        this.votes = votes;
    }

    // Gettery
    public Long getId() { return id; }
    public String getName() { return name; } // Zmieniono getCandidateName ‚Üí getName
    public String getParty() { return party; }
    public int getVotes() { return votes; }
}


åCIEØKA: src\main\java\com\election\model\ElectionResult.java
----------------------------------------------------------------
package com.election.model;

import jakarta.persistence.*;

@Entity
@Table(name = "election_results")
public class ElectionResult {
    @Column(name = "candidate_name") // Dopasuj do nazwy kolumny w bazie
    private String candidateName;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private int votes;

    // Konstruktor domyƒπ‚Ä∫lny (wymagany przez Hibernate)
    public ElectionResult() {}

    // Konstruktor z parametrami
    public ElectionResult(String candidateName, int votes) {
        this.candidateName = candidateName;
        this.votes = votes;
    }

    // Gettery i settery
    public Long getId() { return id; }
    public String getCandidateName() { return candidateName; }
    public void setCandidateName(String candidateName) { this.candidateName = candidateName; }
    public int getVotes() { return votes; }
    public void setVotes(int votes) { this.votes = votes; }
}



åCIEØKA: src\main\java\com\election\model\User.java
------------------------------------------------------
package com.election.model;

import javafx.beans.property.*;
import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "USERS")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String username;

    @Column(nullable = false)
    private String password;

    @Column(nullable = false)
    private String role;

    @Column(name = "first_name", nullable = false)
    private String firstName;

    @Column(name = "last_name", nullable = false)
    private String lastName;

    @Column(name = "pesel", nullable = false, unique = true, length = 11)
    private String pesel;

    @Column(name = "has_voted", nullable = false)
    private boolean hasVoted = false;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
    private List<Vote> votes = new ArrayList<>();

    public List<Vote> getVotes() {
        return votes;
    }

    public void setVotes(List<Vote> votes) {
        this.votes = votes;
    }
    // Getters & Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }

    public boolean isHasVoted() {
        return hasVoted;
    }

    public void setHasVoted(boolean hasVoted) {
        this.hasVoted = hasVoted;
    }

    public String getRole() { return role; }
    public void setRole(String role) { this.role = role; }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getPesel() {
        return pesel;
    }

    public void setPesel(String pesel) {
        if (pesel == null || !pesel.matches("\\d{11}")) {
            throw new IllegalArgumentException("Nieprawid≈Çowy PESEL");
        }
        this.pesel = pesel;
    }

    public User() {}

}


åCIEØKA: src\main\java\com\election\model\Vote.java
------------------------------------------------------
package com.election.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "VOTES")
public class Vote {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    @ManyToOne
    @JoinColumn(name = "candidate_id")
    private Candidate candidate;

    @Column(name = "has_voted", nullable = false)
    private boolean hasVoted;

    @Column(name = "vote_time", nullable = false)
    private LocalDateTime voteTime;

    // Gettery i Settery
    public Long getId() {
        return id;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }


    public Candidate getCandidate() {
        return candidate;
    }

    public void setCandidate(Candidate candidate) {
        this.candidate = candidate;
    }

    public LocalDateTime getVoteTime() {
        return voteTime;
    }

    public void setVoteTime(LocalDateTime voteTime) {
        this.voteTime = voteTime;
    }
    public boolean isHasVoted() {
        return hasVoted;
    }

    public void setHasVoted(boolean hasVoted) {
        this.hasVoted = hasVoted;
    }
}


åCIEØKA: src\main\java\com\election\service\AuthService.java
---------------------------------------------------------------
package com.election.service;

import com.election.dao.UserDAO;
import com.election.model.User;
import org.mindrot.jbcrypt.BCrypt;

public class AuthService {
    private UserDAO userDAO = new UserDAO();

    public AuthResult authenticate(String username, String password) {
        User user = userDAO.findByUsername(username);
        if (user == null) {
            return new AuthResult(null, AuthStatus.USER_NOT_FOUND);
        }
        if (!BCrypt.checkpw(password, user.getPassword())) {
            return new AuthResult(null, AuthStatus.INVALID_PASSWORD);
        }
        return new AuthResult(user, AuthStatus.SUCCESS);
    }

    public enum AuthStatus {
        SUCCESS, USER_NOT_FOUND, INVALID_PASSWORD
    }

    public static class AuthResult {
        private final User user;
        private final AuthStatus status;

        public AuthResult(User user, AuthStatus status) {
            this.user = user;
            this.status = status;
        }

        public User getUser() {
            return user;
        }

        public AuthStatus getStatus() {
            return status;
        }
    }
}


åCIEØKA: src\main\java\com\election\service\ElectionService.java
-------------------------------------------------------------------
package com.election.service;

import com.election.exception.VotingException;
import com.election.model.Candidate;
import com.election.model.CandidateResult;
import com.election.util.HibernateUtil;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import java.util.List;

public class ElectionService {

    public List<CandidateResult> getCurrentResults() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            String hql = "SELECT new com.election.model.CandidateResult(c.id, c.name, c.party, c.votes) FROM Candidate c";
            return session.createQuery(hql, CandidateResult.class).getResultList();
        }
    }

    public List<Candidate> getAllCandidates() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.createQuery("FROM Candidate", Candidate.class).getResultList();
        }
    }

    public void registerVote(Candidate candidate) throws VotingException {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = null;

        try {
            transaction = session.beginTransaction();

            Candidate managedCandidate = session.get(Candidate.class, candidate.getId());
            managedCandidate.setVotes(managedCandidate.getVotes() + 1);

            session.update(managedCandidate);
            transaction.commit();

        } catch (Exception e) {
            if (transaction != null) transaction.rollback();
            throw new VotingException("B≈ÇƒÖd podczas rejestracji g≈Çosu: " + e.getMessage());
        } finally {
            session.close();
        }
    }
}


åCIEØKA: src\main\java\com\election\service\ExportServicePDF.java
--------------------------------------------------------------------
package com.election.service;

import com.election.model.Candidate;
import com.lowagie.text.*;
import com.lowagie.text.pdf.BaseFont;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.util.List;

public class ExportServicePDF {

    public static void exportToPDF(List<Candidate> candidates, String filePath) throws Exception {
        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(filePath));
        document.open();

        BaseFont bf = BaseFont.createFont("c:/windows/fonts/arial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
        Font font = new Font(bf, 12);

        document.add(new Paragraph("Wyniki wybor√≥w", font));
        document.add(new Paragraph(" "));

        PdfPTable table = new PdfPTable(4);
        table.addCell("ID");
        table.addCell("Nazwisko i Imiƒô");
        table.addCell("Partia");
        table.addCell("Liczba g≈Ços√≥w");

        for (Candidate c : candidates) {
            table.addCell(String.valueOf(c.getId()));
            table.addCell(c.getName());
            table.addCell(c.getParty());
            table.addCell(String.valueOf(c.getVotes()));
        }

        document.add(table);
        document.close();
    }
}



åCIEØKA: src\main\java\com\election\service\VotingService.java
-----------------------------------------------------------------
package com.election.service;

import com.election.model.Candidate;
import com.election.model.User;
import com.election.model.Vote;
import com.election.util.HibernateUtil;
import org.hibernate.Session;
import org.hibernate.Transaction;

import java.time.LocalDateTime;

public class VotingService {

    public void castVote(User user, Candidate candidate) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = session.beginTransaction();

        try {
            if (user == null || candidate == null) {
                throw new IllegalStateException("Nie znaleziono u≈ºytkownika lub kandydata.");
            }

            if (user.isHasVoted()) {
                throw new IllegalStateException("U≈ºytkownik ju≈º g≈Çosowa≈Ç.");
            }

            // Zwiƒôksz liczbƒô g≈Ços√≥w
            candidate.setVotes(candidate.getVotes() + 1);
            session.merge(candidate);

            // Utw√≥rz nowy g≈Ços
            Vote vote = new Vote();
            vote.setCandidate(candidate);
            vote.setUser(user);
            vote.setVoteTime(LocalDateTime.now());
            session.save(vote);

            // Zaktualizuj u≈ºytkownika
            User managedUser = session.get(User.class, user.getId());
            managedUser.setHasVoted(true);
            session.merge(user);

            // Opcjonalnie: aktualizacja wynik√≥w
            //updateElectionResults(session, candidate);

            tx.commit();
        } catch (Exception e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
    }


//    private void updateElectionResults(Session session, Candidate candidate) {
//        ElectionResult result = session.createQuery(
//                        "FROM ElectionResult WHERE candidateName = :name",
//                        ElectionResult.class)
//                .setParameter("name", candidate.getName())
//                .uniqueResult();
//
//        if (result == null) {
//            result = new ElectionResult(candidate.getName(), 1);
//        } else {
//            result.setVotes(result.getVotes() + 1);
//        }
//
//        session.merge(result);
//    }

    public boolean hasUserVoted(User user) {
        return user.isHasVoted();
    }
}


åCIEØKA: src\main\java\com\election\util\DataInitializer.java
----------------------------------------------------------------
package com.election.util;

import com.election.model.Candidate;
import com.election.model.User;
import org.hibernate.Session;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.sql.Statement;
import java.util.List;
import java.util.stream.Collectors;

public class DataInitializer {

    public static void initializeIfEmpty(Session session) {
        boolean shouldImport = isDatabaseEmpty(session);

        if (shouldImport) {
            System.out.println("Import danych z import.sql...");
            runImportSQL(session);
        } else {
            System.out.println("Baza danych ju≈º zawiera dane. Import pominiƒôty.");
        }
    }

    private static boolean isDatabaseEmpty(Session session) {
        List<?> users = session.createQuery("from User").setMaxResults(1).list();
        List<?> candidates = session.createQuery("from Candidate").setMaxResults(1).list();
        return users.isEmpty() && candidates.isEmpty();
    }

    private static void runImportSQL(Session session) {
        runSqlFile(session, "import.sql");
        runSqlFile(session, "import_dynamic.sql");
    }

    private static void runSqlFile(Session session, String fileName) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(
                DataInitializer.class.getClassLoader().getResourceAsStream(fileName)))) {

            String sql = reader.lines().collect(Collectors.joining("\n"));

            session.doWork(connection -> {
                try (Statement stmt = connection.createStatement()) {
                    for (String part : sql.split(";")) {
                        if (!part.trim().isEmpty()) {
                            stmt.execute(part.trim());
                        }
                    }
                }
            });

            System.out.println("Zaimportowano dane z " + fileName);

        } catch (Exception e) {
            System.err.println("B≈ÇƒÖd przy imporcie pliku " + fileName + ": " + e.getMessage());
        }
    }

}



åCIEØKA: src\main\java\com\election\util\HibernateUtil.java
--------------------------------------------------------------
package com.election.util;

import com.election.model.ElectionResult;
import com.election.model.User;
import com.election.model.Candidate;
import com.election.model.Vote;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.service.ServiceRegistry;

public class HibernateUtil {
    private static final SessionFactory sessionFactory = buildSessionFactory();

    private static SessionFactory buildSessionFactory() {
        try {
            // Wczytaj konfiguracjƒô z hibernate.cfg.xml z classpath
            Configuration configuration = new Configuration().configure();

            // Dodaj klasy mapowane (je≈õli nie masz <mapping> w XML, ale tu sƒÖ redundantne)
            configuration.addAnnotatedClass(User.class);
            configuration.addAnnotatedClass(Candidate.class);
            configuration.addAnnotatedClass(Vote.class);
            configuration.addAnnotatedClass(ElectionResult.class);

            ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
                    .applySettings(configuration.getProperties())
                    .build();

            return configuration.buildSessionFactory(serviceRegistry);

        } catch (Throwable ex) {
            System.err.println("Initial SessionFactory creation failed." + ex);
            throw new ExceptionInInitializerError(ex);
        }
    }

    public static SessionFactory getSessionFactory() {
        return sessionFactory;
    }

    public static void shutdown() {
        if (sessionFactory != null) {
            sessionFactory.close();
        }
    }
}


åCIEØKA: src\main\resources\com\election\view\admin_view.fxml
----------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.chart.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.control.cell.PropertyValueFactory?>
<?import javafx.scene.layout.*?>

<?import java.net.URL?>
<?import javafx.collections.FXCollections?>
<?import java.lang.String?>
<StackPane prefHeight="600" prefWidth="800" styleClass="root-style"
           xmlns="http://javafx.com/javafx/17.0.12"
           xmlns:fx="http://javafx.com/fxml/1"
           fx:controller="com.election.controller.AdminController">

    <stylesheets>
        <URL value="@style.css" />
    </stylesheets>

    <TabPane fx:id="tabPane" prefHeight="600" prefWidth="800" tabClosingPolicy="UNAVAILABLE">

        <!-- U≈ºytkownicy -->
        <Tab text="U≈ºytkownicy">
            <VBox spacing="10" styleClass="vbox-padding">
                <HBox spacing="10" alignment="CENTER_LEFT">
                    <Label styleClass="panel-title" text="Panel administratora" />
                    <Label styleClass="white-text" text="Szukaj PESEL:" />
                    <TextField fx:id="peselSearchField" promptText="Wprowad≈∫ PESEL" />
                    <Button onAction="#handlePeselSearch" text="Szukaj" />
                    <Button onAction="#handleShowAllUsers" text="Poka≈º wszystkich" />
                </HBox>

                <TableView fx:id="usersTable">
                    <columns>
                        <TableColumn fx:id="idColumn" prefWidth="50" text="ID" />
                        <TableColumn fx:id="usernameColumn" prefWidth="100" text="Login" />
                        <TableColumn fx:id="roleColumn" prefWidth="100" text="Rola" />
                        <TableColumn fx:id="firstNameColumn" prefWidth="120" text="Imiƒô" />
                        <TableColumn fx:id="lastNameColumn" prefWidth="120" text="Nazwisko" />
                        <TableColumn fx:id="peselColumn" prefWidth="150" text="PESEL" />
                    </columns>
                </TableView>
            </VBox>
        </Tab>

        <!-- Wyniki wybor√≥w -->
        <Tab text="Wyniki wybor√≥w">
            <VBox spacing="10" styleClass="vbox-padding">
                <Label styleClass="panel-title" text="Aktualne wyniki wybor√≥w" />
                <HBox spacing="20">
                    <TableView fx:id="resultsTable" prefWidth="450">
                        <columns>
                            <TableColumn fx:id="candidateColumn" prefWidth="200" text="Kandydat">
                                <cellValueFactory>
                                    <PropertyValueFactory property="name" />
                                </cellValueFactory>
                            </TableColumn>
                            <TableColumn fx:id="votesColumn" prefWidth="150" text="Liczba g≈Ços√≥w">
                                <cellValueFactory>
                                    <PropertyValueFactory property="votes" />
                                </cellValueFactory>
                            </TableColumn>
                        </columns>
                    </TableView>

                    <BarChart fx:id="resultsChart" styleClass="results-chart"
                              prefWidth="300"
                              prefHeight="250"
                              animated="true"
                              legendVisible="false"
                              title="G≈Çosy wg kandydata">
                        <xAxis>
                            <CategoryAxis fx:id="xAxis" label="Kandydat" />
                        </xAxis>
                        <yAxis>
                            <NumberAxis fx:id="yAxis" label="Liczba g≈Ços√≥w" />
                        </yAxis>
                    </BarChart>
                </HBox>

                <HBox spacing="10" alignment="CENTER_LEFT">
                    <Button styleClass="button-refresh" onAction="#refreshResults" text="Od≈õwie≈º wyniki" />
                    <Button styleClass="button-logout" onAction="#handleLogout" text="Wyloguj" />
                    <Label fx:id="statusLabel" styleClass="status-label" />
                </HBox>

                <!-- Przyciski eksportu -->
                <HBox spacing="10" alignment="CENTER_LEFT">
                    <Button styleClass="button-export" onAction="#handleExportToCSV" text="Eksportuj do CSV" />
                    <Button styleClass="button-export" onAction="#handleExportToPDF" text="Eksportuj do PDF" />
                </HBox>
            </VBox>
        </Tab>

        <!-- Narzƒôdzia -->
        <Tab text="Narzƒôdzia">
            <VBox spacing="10" styleClass="vbox-padding">
                <Label styleClass="panel-title" text="Narzƒôdzia administratora" />
                <VBox alignment="CENTER" spacing="15" styleClass="tools-container">
                    <Button styleClass="button-generate" onAction="#handleOpenHashGenerator" text="Otw√≥rz Generator Hashy" />
                    <Button styleClass="button-logout" onAction="#handleLogout" text="Wyloguj" />
                </VBox>
            </VBox>
        </Tab>

        <!-- ZarzƒÖdzanie u≈ºytkownikami -->
        <Tab text="ZarzƒÖdzaj u≈ºytkownikami">
            <VBox styleClass="vbox-padding" spacing="10">
                <Label styleClass="panel-title" text="ZarzƒÖdzanie u≈ºytkownikami" />

                <!-- Wyb√≥r akcji -->
                <HBox spacing="10">
                    <Label styleClass="form-label" text="Wybierz akcjƒô:" />
                    <ComboBox fx:id="actionComboBox" promptText="Wybierz...">
                        <items>
                            <FXCollections fx:factory="observableArrayList">
                                <String fx:value="Dodaj u≈ºytkownika"/>
                                <String fx:value="Edytuj u≈ºytkownika"/>
                                <String fx:value="Usu≈Ñ u≈ºytkownika"/>
                            </FXCollections>
                        </items>
                    </ComboBox>
                </HBox>

                <!-- Pe≈Çny formularz danych u≈ºytkownika -->
                <GridPane fx:id="userFormGrid" hgap="10" vgap="10" visible="false">
                    <Label styleClass="form-label" text="Imiƒô:*" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                    <TextField fx:id="firstNameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                    <Label styleClass="form-hint" text="(tylko litery)" GridPane.columnIndex="2" GridPane.rowIndex="0" />

                    <Label styleClass="form-label" text="Nazwisko:*" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                    <TextField fx:id="lastNameField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
                    <Label styleClass="form-hint" text="(tylko litery)" GridPane.columnIndex="2" GridPane.rowIndex="1" />

                    <Label styleClass="form-label" text="PESEL:" GridPane.columnIndex="0" GridPane.rowIndex="2" />
                    <TextField fx:id="peselField" GridPane.columnIndex="1" GridPane.rowIndex="2" />

                    <Label styleClass="form-label" text="Login:*" GridPane.columnIndex="0" GridPane.rowIndex="3" />
                    <TextField fx:id="usernameField" GridPane.columnIndex="1" GridPane.rowIndex="3" />
                    <Label styleClass="form-hint" text="(litery, cyfry, _)" GridPane.columnIndex="2" GridPane.rowIndex="3" />

                    <Label styleClass="form-label" text="Has≈Ço:" GridPane.columnIndex="0" GridPane.rowIndex="4" />
                    <PasswordField fx:id="passwordField" GridPane.columnIndex="1" GridPane.rowIndex="4" />

                    <Label styleClass="form-label" text="Rola:" GridPane.columnIndex="0" GridPane.rowIndex="5" />
                    <ComboBox fx:id="roleComboBox" GridPane.columnIndex="1" GridPane.rowIndex="5">
                        <items>
                            <FXCollections fx:factory="observableArrayList">
                                <String fx:value="USER"/>
                                <String fx:value="ADMIN"/>
                            </FXCollections>
                        </items>
                    </ComboBox>
                </GridPane>

                <!-- Pole identyfikatora (tylko dla edycji/usuwania) -->
                <GridPane fx:id="identifierGrid" hgap="10" vgap="10" visible="false">
                    <Label styleClass="form-label" text="ID lub PESEL:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                    <TextField fx:id="identifierField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                </GridPane>

                <Button fx:id="actionButton" text="Wykonaj" onAction="#handleUserManagement" />
                <Label fx:id="userManagementStatus" styleClass="status-label" />
            </VBox>
        </Tab>
    </TabPane>
</StackPane>


åCIEØKA: src\main\resources\com\election\view\login.fxml
-----------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>

<?import java.net.URL?>
<BorderPane prefHeight="600.0" prefWidth="800.0"
            xmlns="http://javafx.com/javafx/17.0.12"
            xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.election.controller.LoginController">

    <stylesheets>
        <URL value="@style.css" />
    </stylesheets>

    <center>
        <VBox styleClass="root-style" alignment="CENTER" spacing="20">
            <Label styleClass="app-title" text="Wybory prezydenckie" />

            <GridPane alignment="CENTER" hgap="10" vgap="10">
                <columnConstraints>
                    <ColumnConstraints halignment="RIGHT" />
                    <ColumnConstraints />
                </columnConstraints>

                <rowConstraints>
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                </rowConstraints>

                <Label styleClass="form-label" text="Login:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                <TextField fx:id="usernameField" styleClass="form-field" promptText="Wprowad≈∫ login" GridPane.columnIndex="1" GridPane.rowIndex="0" />

                <Label styleClass="form-label" text="Has≈Ço:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                <PasswordField fx:id="passwordField" styleClass="form-field" promptText="Wprowad≈∫ has≈Ço" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                <HBox alignment="CENTER" spacing="10" GridPane.columnIndex="1" GridPane.rowIndex="2">
                    <Button styleClass="button-login" onAction="#handleLogin" text="Zaloguj" />
                </HBox>
            </GridPane>

            <VBox alignment="CENTER" spacing="10">
                <Label fx:id="errorLabel" styleClass="error-label" />
            </VBox>
        </VBox>
    </center>
</BorderPane>


åCIEØKA: src\main\resources\com\election\view\style.css
----------------------------------------------------------
/* GLOBALNE STYLE */
.root-style {
    -fx-background-color: #34495e;
}

.white-text {
    -fx-text-fill: white;
}

/* TYPOGRAPHY */
.panel-title {
    -fx-font-size: 18px;
    -fx-font-weight: bold;
    -fx-text-fill: white;
}

.app-title {
    -fx-font-size: 40px;
    -fx-font-weight: bold;
    -fx-text-fill: white;
}

.form-label {
    -fx-text-fill: white;
    -fx-font-size: 14px;
}

/* PRZYCISKI */
.button-logout {
    -fx-base: #e74c3c;
    -fx-text-fill: white;
    -fx-font-size: 14px;
}

.button-generate {
    -fx-font-size: 14px;
    -fx-padding: 8px 20px;
    -fx-base: #3498db;
    -fx-text-fill: white;
}

.button-refresh {
    -fx-font-size: 14px;
    -fx-padding: 5px 15px;
}

.button-export {
    -fx-font-size: 14px;
    -fx-padding: 5px 15px;
}

.button-add {
    -fx-font-size: 14px;
    -fx-padding: 5px 15px;
}

.button-save {
    -fx-font-size: 14px;
    -fx-padding: 5px 15px;
}

.button-delete {
    -fx-font-size: 14px;
    -fx-padding: 5px 15px;
}

.button-login {
    -fx-font-size: 20px;
    -fx-pref-height: 44px;
    -fx-pref-width: 202px;
}

.button-vote {
    -fx-font-size: 32px;
    -fx-base: #27ae60;
    -fx-text-fill: white;
    -fx-pref-width: 450px;
}

/* KONTENERY */
.vbox-padding {
    -fx-padding: 20px;
}

.tools-container {
    -fx-padding: 30px 0 0 0;
}

.voting-container {
    -fx-padding: 20px;
    -fx-background-color: white;
    -fx-background-radius: 10px;
}

.header-style {
    -fx-padding: 10px;
    -fx-background-color: #34495e;
}

.footer-style {
    -fx-padding: 15px;
    -fx-background-color: #34495e;
}

/* STATUSY I KOMUNIKATY */
.status-label {
    -fx-text-fill: #2ecc71;
    -fx-font-style: italic;
}

.edit-status-label {
    -fx-text-fill: #f1c40f;
    -fx-font-style: italic;
}

.delete-status-label {
    -fx-text-fill: #e74c3c;
    -fx-font-style: italic;
}

.error-label {
    -fx-text-fill: #ff4444;
    -fx-font-size: 20px;
}

.vote-status-label {
    -fx-font-size: 24px;
    -fx-text-fill: #e74c3c;
}

/* FORMULARZE */
.form-field {
    -fx-pref-width: 200px;
    -fx-font-size: 20px;
}

/* WYKRESY */
.results-chart {
    -fx-title-fill: white;
}

.results-chart .chart-title {
    -fx-text-fill: white;
}

.results-chart .axis-label {
    -fx-text-fill: white;
}

.results-chart .axis {
    -fx-tick-label-fill: white;
}

/* SPECJALNE ELEMENTY */
.welcome-text {
    -fx-font-size: 50px;
    -fx-font-weight: bold;
    -fx-text-fill: #2c3e50;
}

.candidate-label {
    -fx-font-size: 48px;
    -fx-font-weight: bold;
}

.candidate-combo {
    -fx-pref-height: 65px;
    -fx-pref-width: 450px;
    -fx-font-size: 25px;
}

.footer-text {
    -fx-text-fill: white;
    -fx-font-size: 30px;
}
.form-field {
    -fx-pref-width: 200px;
    -fx-font-size: 14px;
}

.form-label {
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-font-weight: normal;
}

#userFormGrid {
    -fx-padding: 15px;
    -fx-background-color: rgba(255, 255, 255, 0.1);
    -fx-background-radius: 5px;
}
.form-hint {
    -fx-text-fill: #bdc3c7;
    -fx-font-size: 11px;
    -fx-font-style: italic;
}


åCIEØKA: src\main\resources\com\election\view\user_view.fxml
---------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>

<?import java.net.URL?>
<BorderPane prefHeight="600" prefWidth="800"
            xmlns="http://javafx.com/javafx/17.0.12"
            xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.election.controller.UserController">

    <stylesheets>
        <URL value="@style.css" />
    </stylesheets>

    <!-- Stopka -->
    <bottom>
        <HBox styleClass="footer-style" alignment="CENTER">
            <Label styleClass="footer-text" text="Wybory prezydenckie 2025" />
        </HBox>
    </bottom>

    <!-- G≈Ç√≥wna zawarto≈õƒá -->
    <top>
        <VBox alignment="CENTER" prefWidth="800.0" spacing="20">
            <!-- Panel nawigacyjny -->
            <HBox styleClass="header-style" alignment="CENTER_RIGHT">
                <Button fx:id="logoutButton" styleClass="button-logout" onAction="#handleLogout" text="Wyloguj" />
            </HBox>

            <!-- Formularz g≈Çosowania -->
            <VBox styleClass="voting-container" alignment="CENTER" spacing="20">
                <!-- Nag≈Ç√≥wek -->
                <Label styleClass="welcome-text" text="Witaj w systemie g≈Çosowania!" />

                <!-- Lista kandydat√≥w -->
                <Label styleClass="candidate-label" text="Wybierz kandydata:" />

                <ComboBox fx:id="candidateComboBox" styleClass="candidate-combo" promptText="Kliknij, aby wybraƒá..." />

                <!-- Przycisk g≈Çosowania -->
                <Button fx:id="submitButton" styleClass="button-vote" onAction="#handleVoteSubmit" text="Oddaj g≈Ços" />

                <!-- Komunikaty statusu -->
                <Label fx:id="statusLabel" styleClass="vote-status-label" wrapText="true" />
            </VBox>
        </VBox>
    </top>
</BorderPane>


åCIEØKA: target\classes\com\election\view\admin_view.fxml
------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.chart.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.control.cell.PropertyValueFactory?>
<?import javafx.scene.layout.*?>

<?import java.net.URL?>
<?import javafx.collections.FXCollections?>
<?import java.lang.String?>
<StackPane prefHeight="600" prefWidth="800" styleClass="root-style"
           xmlns="http://javafx.com/javafx/17.0.12"
           xmlns:fx="http://javafx.com/fxml/1"
           fx:controller="com.election.controller.AdminController">

    <stylesheets>
        <URL value="@style.css" />
    </stylesheets>

    <TabPane fx:id="tabPane" prefHeight="600" prefWidth="800" tabClosingPolicy="UNAVAILABLE">

        <!-- U≈ºytkownicy -->
        <Tab text="U≈ºytkownicy">
            <VBox spacing="10" styleClass="vbox-padding">
                <HBox spacing="10" alignment="CENTER_LEFT">
                    <Label styleClass="panel-title" text="Panel administratora" />
                    <Label styleClass="white-text" text="Szukaj PESEL:" />
                    <TextField fx:id="peselSearchField" promptText="Wprowad≈∫ PESEL" />
                    <Button onAction="#handlePeselSearch" text="Szukaj" />
                    <Button onAction="#handleShowAllUsers" text="Poka≈º wszystkich" />
                </HBox>

                <TableView fx:id="usersTable">
                    <columns>
                        <TableColumn fx:id="idColumn" prefWidth="50" text="ID" />
                        <TableColumn fx:id="usernameColumn" prefWidth="100" text="Login" />
                        <TableColumn fx:id="roleColumn" prefWidth="100" text="Rola" />
                        <TableColumn fx:id="firstNameColumn" prefWidth="120" text="Imiƒô" />
                        <TableColumn fx:id="lastNameColumn" prefWidth="120" text="Nazwisko" />
                        <TableColumn fx:id="peselColumn" prefWidth="150" text="PESEL" />
                    </columns>
                </TableView>
            </VBox>
        </Tab>

        <!-- Wyniki wybor√≥w -->
        <Tab text="Wyniki wybor√≥w">
            <VBox spacing="10" styleClass="vbox-padding">
                <Label styleClass="panel-title" text="Aktualne wyniki wybor√≥w" />
                <HBox spacing="20">
                    <TableView fx:id="resultsTable" prefWidth="450">
                        <columns>
                            <TableColumn fx:id="candidateColumn" prefWidth="200" text="Kandydat">
                                <cellValueFactory>
                                    <PropertyValueFactory property="name" />
                                </cellValueFactory>
                            </TableColumn>
                            <TableColumn fx:id="votesColumn" prefWidth="150" text="Liczba g≈Ços√≥w">
                                <cellValueFactory>
                                    <PropertyValueFactory property="votes" />
                                </cellValueFactory>
                            </TableColumn>
                        </columns>
                    </TableView>

                    <BarChart fx:id="resultsChart" styleClass="results-chart"
                              prefWidth="300"
                              prefHeight="250"
                              animated="true"
                              legendVisible="false"
                              title="G≈Çosy wg kandydata">
                        <xAxis>
                            <CategoryAxis fx:id="xAxis" label="Kandydat" />
                        </xAxis>
                        <yAxis>
                            <NumberAxis fx:id="yAxis" label="Liczba g≈Ços√≥w" />
                        </yAxis>
                    </BarChart>
                </HBox>

                <HBox spacing="10" alignment="CENTER_LEFT">
                    <Button styleClass="button-refresh" onAction="#refreshResults" text="Od≈õwie≈º wyniki" />
                    <Button styleClass="button-logout" onAction="#handleLogout" text="Wyloguj" />
                    <Label fx:id="statusLabel" styleClass="status-label" />
                </HBox>

                <!-- Przyciski eksportu -->
                <HBox spacing="10" alignment="CENTER_LEFT">
                    <Button styleClass="button-export" onAction="#handleExportToCSV" text="Eksportuj do CSV" />
                    <Button styleClass="button-export" onAction="#handleExportToPDF" text="Eksportuj do PDF" />
                </HBox>
            </VBox>
        </Tab>

        <!-- Narzƒôdzia -->
        <Tab text="Narzƒôdzia">
            <VBox spacing="10" styleClass="vbox-padding">
                <Label styleClass="panel-title" text="Narzƒôdzia administratora" />
                <VBox alignment="CENTER" spacing="15" styleClass="tools-container">
                    <Button styleClass="button-generate" onAction="#handleOpenHashGenerator" text="Otw√≥rz Generator Hashy" />
                    <Button styleClass="button-logout" onAction="#handleLogout" text="Wyloguj" />
                </VBox>
            </VBox>
        </Tab>

        <!-- ZarzƒÖdzanie u≈ºytkownikami -->
        <Tab text="ZarzƒÖdzaj u≈ºytkownikami">
            <VBox styleClass="vbox-padding" spacing="10">
                <Label styleClass="panel-title" text="ZarzƒÖdzanie u≈ºytkownikami" />

                <!-- Wyb√≥r akcji -->
                <HBox spacing="10">
                    <Label styleClass="form-label" text="Wybierz akcjƒô:" />
                    <ComboBox fx:id="actionComboBox" promptText="Wybierz...">
                        <items>
                            <FXCollections fx:factory="observableArrayList">
                                <String fx:value="Dodaj u≈ºytkownika"/>
                                <String fx:value="Edytuj u≈ºytkownika"/>
                                <String fx:value="Usu≈Ñ u≈ºytkownika"/>
                            </FXCollections>
                        </items>
                    </ComboBox>
                </HBox>

                <!-- Pe≈Çny formularz danych u≈ºytkownika -->
                <GridPane fx:id="userFormGrid" hgap="10" vgap="10" visible="false">
                    <Label styleClass="form-label" text="Imiƒô:*" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                    <TextField fx:id="firstNameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                    <Label styleClass="form-hint" text="(tylko litery)" GridPane.columnIndex="2" GridPane.rowIndex="0" />

                    <Label styleClass="form-label" text="Nazwisko:*" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                    <TextField fx:id="lastNameField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
                    <Label styleClass="form-hint" text="(tylko litery)" GridPane.columnIndex="2" GridPane.rowIndex="1" />

                    <Label styleClass="form-label" text="PESEL:" GridPane.columnIndex="0" GridPane.rowIndex="2" />
                    <TextField fx:id="peselField" GridPane.columnIndex="1" GridPane.rowIndex="2" />

                    <Label styleClass="form-label" text="Login:*" GridPane.columnIndex="0" GridPane.rowIndex="3" />
                    <TextField fx:id="usernameField" GridPane.columnIndex="1" GridPane.rowIndex="3" />
                    <Label styleClass="form-hint" text="(litery, cyfry, _)" GridPane.columnIndex="2" GridPane.rowIndex="3" />

                    <Label styleClass="form-label" text="Has≈Ço:" GridPane.columnIndex="0" GridPane.rowIndex="4" />
                    <PasswordField fx:id="passwordField" GridPane.columnIndex="1" GridPane.rowIndex="4" />

                    <Label styleClass="form-label" text="Rola:" GridPane.columnIndex="0" GridPane.rowIndex="5" />
                    <ComboBox fx:id="roleComboBox" GridPane.columnIndex="1" GridPane.rowIndex="5">
                        <items>
                            <FXCollections fx:factory="observableArrayList">
                                <String fx:value="USER"/>
                                <String fx:value="ADMIN"/>
                            </FXCollections>
                        </items>
                    </ComboBox>
                </GridPane>

                <!-- Pole identyfikatora (tylko dla edycji/usuwania) -->
                <GridPane fx:id="identifierGrid" hgap="10" vgap="10" visible="false">
                    <Label styleClass="form-label" text="ID lub PESEL:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                    <TextField fx:id="identifierField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                </GridPane>

                <Button fx:id="actionButton" text="Wykonaj" onAction="#handleUserManagement" />
                <Label fx:id="userManagementStatus" styleClass="status-label" />
            </VBox>
        </Tab>
    </TabPane>
</StackPane>


åCIEØKA: target\classes\com\election\view\login.fxml
-------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>

<?import java.net.URL?>
<BorderPane prefHeight="600.0" prefWidth="800.0"
            xmlns="http://javafx.com/javafx/17.0.12"
            xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.election.controller.LoginController">

    <stylesheets>
        <URL value="@style.css" />
    </stylesheets>

    <center>
        <VBox styleClass="root-style" alignment="CENTER" spacing="20">
            <Label styleClass="app-title" text="Wybory prezydenckie" />

            <GridPane alignment="CENTER" hgap="10" vgap="10">
                <columnConstraints>
                    <ColumnConstraints halignment="RIGHT" />
                    <ColumnConstraints />
                </columnConstraints>

                <rowConstraints>
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                </rowConstraints>

                <Label styleClass="form-label" text="Login:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                <TextField fx:id="usernameField" styleClass="form-field" promptText="Wprowad≈∫ login" GridPane.columnIndex="1" GridPane.rowIndex="0" />

                <Label styleClass="form-label" text="Has≈Ço:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                <PasswordField fx:id="passwordField" styleClass="form-field" promptText="Wprowad≈∫ has≈Ço" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                <HBox alignment="CENTER" spacing="10" GridPane.columnIndex="1" GridPane.rowIndex="2">
                    <Button styleClass="button-login" onAction="#handleLogin" text="Zaloguj" />
                </HBox>
            </GridPane>

            <VBox alignment="CENTER" spacing="10">
                <Label fx:id="errorLabel" styleClass="error-label" />
            </VBox>
        </VBox>
    </center>
</BorderPane>


åCIEØKA: target\classes\com\election\view\style.css
------------------------------------------------------
/* GLOBALNE STYLE */
.root-style {
    -fx-background-color: #34495e;
}

.white-text {
    -fx-text-fill: white;
}

/* TYPOGRAPHY */
.panel-title {
    -fx-font-size: 18px;
    -fx-font-weight: bold;
    -fx-text-fill: white;
}

.app-title {
    -fx-font-size: 40px;
    -fx-font-weight: bold;
    -fx-text-fill: white;
}

.form-label {
    -fx-text-fill: white;
    -fx-font-size: 14px;
}

/* PRZYCISKI */
.button-logout {
    -fx-base: #e74c3c;
    -fx-text-fill: white;
    -fx-font-size: 14px;
}

.button-generate {
    -fx-font-size: 14px;
    -fx-padding: 8px 20px;
    -fx-base: #3498db;
    -fx-text-fill: white;
}

.button-refresh {
    -fx-font-size: 14px;
    -fx-padding: 5px 15px;
}

.button-export {
    -fx-font-size: 14px;
    -fx-padding: 5px 15px;
}

.button-add {
    -fx-font-size: 14px;
    -fx-padding: 5px 15px;
}

.button-save {
    -fx-font-size: 14px;
    -fx-padding: 5px 15px;
}

.button-delete {
    -fx-font-size: 14px;
    -fx-padding: 5px 15px;
}

.button-login {
    -fx-font-size: 20px;
    -fx-pref-height: 44px;
    -fx-pref-width: 202px;
}

.button-vote {
    -fx-font-size: 32px;
    -fx-base: #27ae60;
    -fx-text-fill: white;
    -fx-pref-width: 450px;
}

/* KONTENERY */
.vbox-padding {
    -fx-padding: 20px;
}

.tools-container {
    -fx-padding: 30px 0 0 0;
}

.voting-container {
    -fx-padding: 20px;
    -fx-background-color: white;
    -fx-background-radius: 10px;
}

.header-style {
    -fx-padding: 10px;
    -fx-background-color: #34495e;
}

.footer-style {
    -fx-padding: 15px;
    -fx-background-color: #34495e;
}

/* STATUSY I KOMUNIKATY */
.status-label {
    -fx-text-fill: #2ecc71;
    -fx-font-style: italic;
}

.edit-status-label {
    -fx-text-fill: #f1c40f;
    -fx-font-style: italic;
}

.delete-status-label {
    -fx-text-fill: #e74c3c;
    -fx-font-style: italic;
}

.error-label {
    -fx-text-fill: #ff4444;
    -fx-font-size: 20px;
}

.vote-status-label {
    -fx-font-size: 24px;
    -fx-text-fill: #e74c3c;
}

/* FORMULARZE */
.form-field {
    -fx-pref-width: 200px;
    -fx-font-size: 20px;
}

/* WYKRESY */
.results-chart {
    -fx-title-fill: white;
}

.results-chart .chart-title {
    -fx-text-fill: white;
}

.results-chart .axis-label {
    -fx-text-fill: white;
}

.results-chart .axis {
    -fx-tick-label-fill: white;
}

/* SPECJALNE ELEMENTY */
.welcome-text {
    -fx-font-size: 50px;
    -fx-font-weight: bold;
    -fx-text-fill: #2c3e50;
}

.candidate-label {
    -fx-font-size: 48px;
    -fx-font-weight: bold;
}

.candidate-combo {
    -fx-pref-height: 65px;
    -fx-pref-width: 450px;
    -fx-font-size: 25px;
}

.footer-text {
    -fx-text-fill: white;
    -fx-font-size: 30px;
}
.form-field {
    -fx-pref-width: 200px;
    -fx-font-size: 14px;
}

.form-label {
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-font-weight: normal;
}

#userFormGrid {
    -fx-padding: 15px;
    -fx-background-color: rgba(255, 255, 255, 0.1);
    -fx-background-radius: 5px;
}
.form-hint {
    -fx-text-fill: #bdc3c7;
    -fx-font-size: 11px;
    -fx-font-style: italic;
}


åCIEØKA: target\classes\com\election\view\user_view.fxml
-----------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>

<?import java.net.URL?>
<BorderPane prefHeight="600" prefWidth="800"
            xmlns="http://javafx.com/javafx/17.0.12"
            xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.election.controller.UserController">

    <stylesheets>
        <URL value="@style.css" />
    </stylesheets>

    <!-- Stopka -->
    <bottom>
        <HBox styleClass="footer-style" alignment="CENTER">
            <Label styleClass="footer-text" text="Wybory prezydenckie 2025" />
        </HBox>
    </bottom>

    <!-- G≈Ç√≥wna zawarto≈õƒá -->
    <top>
        <VBox alignment="CENTER" prefWidth="800.0" spacing="20">
            <!-- Panel nawigacyjny -->
            <HBox styleClass="header-style" alignment="CENTER_RIGHT">
                <Button fx:id="logoutButton" styleClass="button-logout" onAction="#handleLogout" text="Wyloguj" />
            </HBox>

            <!-- Formularz g≈Çosowania -->
            <VBox styleClass="voting-container" alignment="CENTER" spacing="20">
                <!-- Nag≈Ç√≥wek -->
                <Label styleClass="welcome-text" text="Witaj w systemie g≈Çosowania!" />

                <!-- Lista kandydat√≥w -->
                <Label styleClass="candidate-label" text="Wybierz kandydata:" />

                <ComboBox fx:id="candidateComboBox" styleClass="candidate-combo" promptText="Kliknij, aby wybraƒá..." />

                <!-- Przycisk g≈Çosowania -->
                <Button fx:id="submitButton" styleClass="button-vote" onAction="#handleVoteSubmit" text="Oddaj g≈Ços" />

                <!-- Komunikaty statusu -->
                <Label fx:id="statusLabel" styleClass="vote-status-label" wrapText="true" />
            </VBox>
        </VBox>
    </top>
</BorderPane>
