Eksport struktury katalogÛw i plikÛw
Wygenerowano: 06/20/2025 21:33:51



åCIEØKA: src\main\java\module-info.java
------------------------------------------
/**
 * Modu≈Ç g≈Ç√≥wny aplikacji systemu wyborczego.
 * Definiuje wymagane zale≈ºno≈õci oraz eksportowane pakiety.
 */
module com.election {
    requires java.naming;
    requires javafx.controls;
    requires javafx.fxml;
    requires java.sql;
    requires jbcrypt;
    requires org.hibernate.orm.core;
    requires org.slf4j;
    requires jakarta.persistence;
    requires com.github.librepdf.openpdf;
    requires java.rmi;
    // ... [zale≈ºno≈õci]

    exports com.election;
    opens com.election to javafx.fxml;
    exports com.election.controller;
    exports com.election.model;
    opens com.election.controller to javafx.fxml;
    opens com.election.util to org.hibernate.orm.core;
    opens com.election.model to org.hibernate.orm.core, javafx.base;
    // ... [eksporty i otwarcia]
}



åCIEØKA: src\main\java\com\election\HashGenerator.java
---------------------------------------------------------
package com.election;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.Clipboard;
import javafx.scene.input.ClipboardContent;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.mindrot.jbcrypt.BCrypt;

// Klasa generujƒÖca hash BCrypt
public class HashGenerator extends Application {
    private Stage parentStage;

    // Ustawia referencjƒô do okna rodzica
    public void setParentStage(Stage parentStage) {
        this.parentStage = parentStage;
    }

    // Inicjalizuje i wy≈õwietla interfejs generatora hash√≥w
    @Override
    public void start(Stage stage) {
        VBox root = new VBox(20);
        root.setPadding(new Insets(20));
        root.setAlignment(Pos.CENTER);

        Label titleLabel = new Label("Generator Hashy BCrypt");
        TextField passwordField = new TextField();
        passwordField.setPromptText("Wprowad≈∫ has≈Ço");
        passwordField.setMaxWidth(300);

        TextField hashField = new TextField();
        hashField.setPromptText("Wygenerowany hash");
        hashField.setMaxWidth(300);
        hashField.setEditable(false);

        Button generateBtn = new Button("Generuj Hash");
        Button copyBtn = new Button("Kopiuj do schowka");

        generateBtn.setOnAction(e -> {
            String password = passwordField.getText();
            if (!password.isEmpty()) {
                String hash = BCrypt.hashpw(password, BCrypt.gensalt());
                hashField.setText(hash);
            }
        });

        copyBtn.setOnAction(e -> {
            if (!hashField.getText().isEmpty()) {
                Clipboard clipboard = Clipboard.getSystemClipboard();
                ClipboardContent content = new ClipboardContent();
                content.putString(hashField.getText());
                clipboard.setContent(content);
            }
        });

        Button backButton = new Button("‚Üê Powr√≥t do panelu admina");
        backButton.setOnAction(e -> {
            if (parentStage != null) {
                parentStage.show();
            }
            stage.close();
        });

        root.getChildren().addAll(
                titleLabel,
                passwordField,
                hashField,
                generateBtn,
                copyBtn,
                backButton
        );

        Scene scene = new Scene(root, 400, 300);
        stage.setTitle("Generator Hashy BCrypt");
        stage.setScene(scene);
        stage.show();
    }

    // Punkt wej≈õcia dla generatora hash√≥w
    public static void main(String[] args) {
        launch(args);
    }
}


åCIEØKA: src\main\java\com\election\Main.java
------------------------------------------------
package com.election;

import com.election.util.DataInitializer;
import com.election.util.HibernateUtil;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.stage.Stage;
import org.hibernate.Session;

import java.net.URL;
import java.util.Objects;

// G≈Ç√≥wna klasa aplikacji
public class Main extends Application {

    // Inicjalizuje aplikacjƒô i wy≈õwietla ekran logowania
    @Override
    public void start(Stage primaryStage) throws Exception {
        // Inicjalizacja Hibernate i danych startowych
        initializeHibernate();

        Image icon = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/images/app_icon.png")));
        primaryStage.getIcons().add(icon);

        // Za≈Çaduj GUI (login.fxml)
        URL url = getClass().getResource("/com/election/view/login.fxml");
        if (url == null) {
            throw new IllegalStateException("Nie znaleziono pliku FXML: login.fxml");
        }

        Parent root = FXMLLoader.load(url);
        Scene scene = new Scene(root);

        primaryStage.setTitle("System g≈Çosowania");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Inicjalizuje po≈ÇƒÖczenie z Hibernate
    private void initializeHibernate() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();

        DataInitializer.initializeIfEmpty(session);

        session.getTransaction().commit();
        session.close();

    }

    // Punkt wej≈õcia aplikacji
    public static void main(String[] args) {
        launch(args);
    }

    // Zamyka po≈ÇƒÖczenia przy wyj≈õciu z aplikacji
    @Override
    public void stop() {
        HibernateUtil.shutdown();
        System.out.println("Aplikacja zosta≈Ça zamkniƒôta");
    }
}


åCIEØKA: src\main\java\com\election\controller\AdminController.java
----------------------------------------------------------------------
package com.election.controller;

import com.election.HashGenerator;
import com.election.dao.CandidateDAO;
import com.election.dao.UserDAO;
import com.election.exception.DatabaseException;
import com.election.exception.ValidationException;
import com.election.model.Candidate;
import com.election.model.CandidateResult;
import com.election.model.User;
import com.election.service.ElectionService;
import com.election.service.ExportServicePDF;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ChangeListener;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Region;
import javafx.scene.layout.StackPane;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import org.mindrot.jbcrypt.BCrypt;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

// Kontroler panelu administratora
public class AdminController {
    private final CandidateDAO candidateDAO = new CandidateDAO();
    private final UserDAO userDAO = new UserDAO();
    private final ElectionService electionService = new ElectionService();
    private final ObservableList<CandidateResult> candidatesData = FXCollections.observableArrayList();
    public CategoryAxis xAxis;
    public Button refreshButton;
    private User currentAdmin;
    private User currentEditUser;
    private boolean passwordChanged = false; // Flaga ≈õledzƒÖca zmianƒô has≈Ça

    @FXML private TableColumn<CandidateResult, String> percentColumn;
    @FXML private TableView<User> usersTable;
    @FXML private TableColumn<User, Long> idColumn;
    @FXML private TableColumn<User, String> usernameColumn;
    @FXML private TableColumn<User, String> roleColumn;
    @FXML private TableColumn<User, String> firstNameColumn;
    @FXML private TableColumn<User, String> lastNameColumn;
    @FXML private TableColumn<User, String> peselColumn;
    @FXML private GridPane userFormGrid;
    @FXML private TextField firstNameField;
    @FXML private TextField lastNameField;
    @FXML private TextField peselField;
    @FXML private TextField usernameField;
    @FXML private PasswordField passwordField;
    @FXML private ComboBox<String> roleComboBox;
    @FXML private TableView<CandidateResult> resultsTable;
    @FXML private TableColumn<CandidateResult, String> candidateColumn;
    @FXML private TableColumn<CandidateResult, Number> votesColumn;
    @FXML private TextField peselSearchField;

    @FXML private BarChart<String, Number> resultsChart;
    @FXML private NumberAxis yAxis;

    @FXML private Label statusLabel;
    @FXML private Label userManagementStatus;

    @FXML private TableView<Candidate> candidatesTable;
    @FXML private TableColumn<Candidate, Long> candidateIdColumn;
    @FXML private TableColumn<Candidate, String> candidateNameColumn;
    @FXML private TableColumn<Candidate, String> candidatePartyColumn;
    @FXML private TableColumn<Candidate, Integer> candidateVotesColumn;
    @FXML private TextField candidateNameField;
    @FXML private TextField candidatePartyField;
    @FXML private Label candidateStatusLabel;

    // Nowe pola dla filtr√≥w
    @FXML private TextField firstNameFilter;
    @FXML private TextField lastNameFilter;
    @FXML private TextField peselFilter;
    @FXML private ComboBox<String> roleFilterComboBox;
    @FXML private Button showPasswordButton;
    @FXML private TextField visiblePasswordField;
    private final Image eyeOpenImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/images/eye-open.png")));
    private final Image eyeClosedImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/images/eye-closed.png")));
    private final ImageView eyeIcon = new ImageView();

    @FXML
    private void togglePasswordVisibility() {
        if (passwordField.isVisible()) {
            // Poka≈º has≈Ço
            visiblePasswordField.setText(passwordField.getText());
            visiblePasswordField.setVisible(true);
            visiblePasswordField.setManaged(true);
            passwordField.setVisible(false);
            passwordField.setManaged(false);

            eyeIcon.setImage(eyeClosedImage);
            showPasswordButton.setTooltip(new Tooltip("Ukryj has≈Ço"));
        } else {
            // Ukryj has≈Ço
            passwordField.setText(visiblePasswordField.getText());
            passwordField.setVisible(true);
            passwordField.setManaged(true);
            visiblePasswordField.setVisible(false);
            visiblePasswordField.setManaged(false);

            eyeIcon.setImage(eyeOpenImage);
            showPasswordButton.setTooltip(new Tooltip("Poka≈º has≈Ço"));
        }

        // Oznacza, ≈ºe has≈Ço mog≈Ço zostaƒá zmienione (je≈õli nie jest puste)
        if (!getPassword().isEmpty()) {
            passwordChanged = true;
        }
    }

    private String getPassword() {
        return passwordField.isVisible() ?
                passwordField.getText() :
                visiblePasswordField.getText();
    }

    private final ObservableList<Candidate> candidatesList = FXCollections.observableArrayList();
    private final ObservableList<User> masterUserList = FXCollections.observableArrayList();
    private final FilteredList<User> filteredUsers = new FilteredList<>(masterUserList);

    // Konfiguruje interfejs u≈ºytkownika i ≈Çaduje dane poczƒÖtkowe
    @FXML
    public void initialize() {
        // Ustawienie obrazka dla przycisku
        eyeIcon.setImage(eyeOpenImage);
        eyeIcon.setFitWidth(16);
        eyeIcon.setFitHeight(16);
        showPasswordButton.setGraphic(eyeIcon);
        // Ustaw tooltip
        Tooltip.install(showPasswordButton, new Tooltip("Poka≈º/ukryj has≈Ço"));
        // Ukryj widoczne pole has≈Ça na starcie
        visiblePasswordField.setVisible(false);
        visiblePasswordField.setManaged(false);
        if (roleComboBox != null) {
            roleComboBox.setItems(FXCollections.observableArrayList("USER", "ADMIN"));
            roleComboBox.setValue("USER");
        }

        // Inicjalizacja filtr√≥w
        roleFilterComboBox.setItems(FXCollections.observableArrayList("ADMIN", "USER"));
        resultsTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        configureUserTable();
        configureResultsTable();
        configureCandidatesTable();
        refreshCandidatesTable();

        // Ustawienie filtrowanej listy
        usersTable.setItems(filteredUsers);

        // Listenery do automatycznego filtrowania przy zmianie warto≈õci
        firstNameFilter.textProperty().addListener((obs, old, newVal) -> handleFilterUsers());
        lastNameFilter.textProperty().addListener((obs, old, newVal) -> handleFilterUsers());
        peselFilter.textProperty().addListener((obs, old, newVal) -> handleFilterUsers());
        roleFilterComboBox.valueProperty().addListener((obs, old, newVal) -> handleFilterUsers());

        if (resultsChart != null) {
            resultsChart.setBarGap(1);
        }

        // Ustaw podpowied≈∫ dla pola has≈Ça tylko wtedy, gdy u≈ºytkownik jest wybrany
        passwordField.setPromptText(null);
        visiblePasswordField.setPromptText(null);

        // Ustaw tooltip
        Tooltip.install(showPasswordButton, new Tooltip("Poka≈º/ukryj has≈Ço"));

        // Upewnij siƒô, ≈ºe oba pola majƒÖ ten sam rozmiar
        visiblePasswordField.prefWidthProperty().bind(passwordField.widthProperty());
        visiblePasswordField.minWidthProperty().bind(passwordField.minWidthProperty());
        visiblePasswordField.maxWidthProperty().bind(passwordField.maxWidthProperty());

        // Dodaj nas≈Çuchiwanie zmian w polach has≈Ça
        addPasswordListeners();
    }

    private void addPasswordListeners() {
        // Nas≈Çuchuj zmian w polach has≈Ça
        ChangeListener<String> passwordChangeListener = (obs, oldVal, newVal) -> {
            if (!newVal.isEmpty()) {
                passwordChanged = true;
            }
        };

        passwordField.textProperty().addListener(passwordChangeListener);
        visiblePasswordField.textProperty().addListener(passwordChangeListener);
    }

    @FXML
    private void handleFilterUsers() {
        filteredUsers.setPredicate(this::matchUser);
    }

    @FXML
    private void handleClearFilters() {
        firstNameFilter.clear();
        lastNameFilter.clear();
        peselFilter.clear();
        roleFilterComboBox.getSelectionModel().clearSelection();
        filteredUsers.setPredicate(null); // Resetuj filtr
    }

    // Metoda sprawdzajƒÖca, czy u≈ºytkownik spe≈Çnia kryteria filtrowania
    private boolean matchUser(User user) {
        // Sprawd≈∫ imiƒô
        if (!firstNameFilter.getText().isEmpty() &&
                !user.getFirstName().toLowerCase().contains(firstNameFilter.getText().toLowerCase())) {
            return false;
        }

        // Sprawd≈∫ nazwisko
        if (!lastNameFilter.getText().isEmpty() &&
                !user.getLastName().toLowerCase().contains(lastNameFilter.getText().toLowerCase())) {
            return false;
        }

        // Sprawd≈∫ PESEL
        if (!peselFilter.getText().isEmpty() &&
                !user.getPesel().contains(peselFilter.getText())) {
            return false;
        }

        // Sprawd≈∫ rolƒô
        if (roleFilterComboBox.getValue() != null &&
                !user.getRole().equals(roleFilterComboBox.getValue())) {
            return false;
        }

        return true;
    }

    public void refreshUserTab() {
        List<User> users = userDAO.getAllUsers();
        masterUserList.setAll(users);
        usersTable.refresh();
    }

    private void configureCandidatesTable() {
        candidateIdColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
        candidateNameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        candidatePartyColumn.setCellValueFactory(new PropertyValueFactory<>("party"));
        candidateVotesColumn.setCellValueFactory(new PropertyValueFactory<>("votes"));

        candidatesTable.getSelectionModel().selectedItemProperty().addListener(
                (obs, oldSelection, newSelection) -> {
                    if (newSelection != null) {
                        candidateNameField.setText(newSelection.getName());
                        candidatePartyField.setText(newSelection.getParty());
                    }
                });
    }

    @FXML
    public void handleUserTabSelected(Event event) {
        if (((Tab) event.getSource()).isSelected()) {
            refreshUserTable();
        }
    }

    // Czy≈õci formularz u≈ºytkownika
    private void clearUserForm() {
        firstNameField.clear();
        lastNameField.clear();
        peselField.clear();
        usernameField.clear();
        passwordField.clear();
        visiblePasswordField.clear();
        roleComboBox.setValue("USER"); // Ustaw domy≈õlnƒÖ warto≈õƒá

        // Usu≈Ñ podpowiedzi
        passwordField.setPromptText(null);
        visiblePasswordField.setPromptText(null);
    }

    // Czy≈õci formularz i resetuje zaznaczenie
    @FXML
    private void handleClearUserForm() {
        clearUserForm();
        usersTable.getSelectionModel().clearSelection();
        currentEditUser = null;
        passwordChanged = false; // Resetuj flagƒô zmiany has≈Ça
        userManagementStatus.setText("");
    }

    // Waliduje numer PESEL
    private void validatePesel() throws ValidationException {
        String pesel = peselField.getText().trim();
        if (!pesel.matches("\\d{11}")) {
            throw new ValidationException("PESEL musi mieƒá 11 cyfr!");
        }

        User existing = userDAO.findByPesel(pesel);
        if (existing != null && (currentEditUser == null || !existing.getId().equals(currentEditUser.getId()))) {
            throw new ValidationException("PESEL ju≈º istnieje w systemie!");
        }
    }

    // Waliduje imiƒô/nazwisko
    private void validateName(String name, String fieldName) throws ValidationException {
        if (!name.matches("[\\p{L}\\s\\-]+")) {
            throw new ValidationException(fieldName + " mo≈ºe zawieraƒá tylko litery, spacje i my≈õlniki!");
        }
    }

    // Waliduje nazwƒô u≈ºytkownika
    private void validateUsername() throws ValidationException {
        String username = usernameField.getText().trim();
        if (!username.matches("[a-zA-Z0-9_]+")) {
            throw new ValidationException("Login mo≈ºe zawieraƒá tylko litery, cyfry i podkre≈õlniki!");
        }

        // Sprawd≈∫, czy login ju≈º istnieje
        User existing = userDAO.findByUsername(username);
        if (existing != null && (currentEditUser == null || !existing.getId().equals(currentEditUser.getId()))) {
            throw new ValidationException("Login ju≈º istnieje w systemie!");
        }
    }

    // Od≈õwie≈ºa widok tabeli u≈ºytkownik√≥w
    private void refreshUserTable() {
        try {
            List<User> users = userDAO.getAllUsers();
            masterUserList.setAll(users);
            usersTable.refresh();
        } catch (DatabaseException e) {
            userManagementStatus.setText("B≈ÇƒÖd ≈Çadowania danych: " + e.getMessage());
        }
    }

    // Konfiguruje kolumny tabeli u≈ºytkownik√≥w
    private void configureUserTable() {
        idColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
        usernameColumn.setCellValueFactory(new PropertyValueFactory<>("username"));
        roleColumn.setCellValueFactory(new PropertyValueFactory<>("role"));
        firstNameColumn.setCellValueFactory(new PropertyValueFactory<>("firstName"));
        lastNameColumn.setCellValueFactory(new PropertyValueFactory<>("lastName"));
        peselColumn.setCellValueFactory(new PropertyValueFactory<>("pesel"));

        // Ustawienie ≈∫r√≥d≈Ça danych
        usersTable.setItems(masterUserList);

        // Listener do wype≈Çniania formularza po wybraniu u≈ºytkownika
        usersTable.getSelectionModel().selectedItemProperty().addListener(
                (obs, oldSelection, newSelection) -> {
                    if (newSelection != null) {
                        fillUserForm(newSelection);
                    }
                });
    }

    private void fillUserForm(User user) {
        firstNameField.setText(user.getFirstName());
        lastNameField.setText(user.getLastName());
        peselField.setText(user.getPesel());
        usernameField.setText(user.getUsername());
        roleComboBox.setValue(user.getRole());
        passwordField.clear(); // Nie pokazujemy has≈Ça
        visiblePasswordField.clear();
        passwordChanged = false; // Resetuj flagƒô zmiany has≈Ça

        // Ustaw podpowied≈∫ dla has≈Ça
        passwordField.setPromptText("(wpisz aby zmieniƒá)");
        visiblePasswordField.setPromptText("(wpisz aby zmieniƒá)");

        currentEditUser = user;
    }

    @FXML private TableColumn<CandidateResult, String> partyColumn;
    // Konfiguruje tabelƒô wynik√≥w
    private void configureResultsTable() {
        candidateColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        partyColumn.setCellValueFactory(new PropertyValueFactory<>("party"));
        votesColumn.setCellValueFactory(new PropertyValueFactory<>("votes"));

        if (votesColumn != null) {
            votesColumn.setCellFactory(tc -> new TableCell<>() {
                @Override
                protected void updateItem(Number value, boolean empty) {
                    super.updateItem(value, empty);
                    setText(empty || value == null ? "" : String.format("%,d", value.intValue()));
                }
            });
        }
        // Dodajemy kolumnƒô z procentami
        percentColumn.setCellValueFactory(cellData -> {
            CandidateResult candidate = cellData.getValue();
            int totalVotes = candidatesData.stream().mapToInt(CandidateResult::getVotes).sum();
            double percent = totalVotes > 0 ? (candidate.getVotes() * 100.0) / totalVotes : 0;

            // To samo formatowanie co w wykresie
            String percentText;
            if (percent == (int) percent) {
                percentText = String.format("%d%%", (int) percent);
            } else if (percent * 10 == (int) (percent * 10)) {
                percentText = String.format("%.1f%%", percent);
            } else {
                percentText = String.format("%.2f%%", percent);
            }
            percentText = percentText.replace(".", ",");

            return new SimpleStringProperty(percentText);
        });

        // Formatowanie kom√≥rek
        percentColumn.setCellFactory(tc -> new TableCell<>() {
            @Override
            protected void updateItem(String value, boolean empty) {
                super.updateItem(value, empty);
                if (empty || value == null) {
                    setText(null);
                } else {
                    setText(value);
                    setStyle("-fx-font-weight: bold; -fx-text-fill: #3498db;");
                }
                setAlignment(Pos.CENTER);
            }
        });
        candidateColumn.setCellFactory(tc -> new TableCell<>() {
            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setText(null);
                } else {
                    setText(item);
                    setWrapText(true);
                    setAlignment(Pos.CENTER);
                }
            }
        });
        // Ustawienia tabeli
        resultsTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        resultsTable.setMinHeight(200);
        resultsTable.setMaxHeight(Double.MAX_VALUE);
    }

    // Inicjalizuje kontroler z danymi zalogowanego administratora
    public void initializeWithUser(User adminUser) {
        this.currentAdmin = adminUser;
        logAdminAccess();

        Platform.runLater(() -> {
            refreshUserTable();  // Od≈õwie≈º dane u≈ºytkownik√≥w
            refreshElectionData();  // Od≈õwie≈º wyniki wybor√≥w
        });
    }

    // Loguje czas logowania administratora
    private void logAdminAccess() {
        System.out.println("Administrator " + currentAdmin.getUsername()
                + " zalogowany o " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss")));
    }

    // Od≈õwie≈ºa widok wynik√≥w wybor√≥w
    @FXML
    private void refreshResults() {
        refreshElectionData();
    }

    // Pobiera i aktualizuje dane wyborcze
    private void refreshElectionData() {
        statusLabel.setText("Od≈õwie≈ºanie wynik√≥w...");

        try {
            // Pobierz i posortuj wyniki malejƒÖco
            List<CandidateResult> results = electionService.getCurrentResults();
            results.sort((r1, r2) -> r2.getVotes() - r1.getVotes());
            candidatesData.setAll(results);
            resultsTable.setItems(candidatesData);

            // Oblicz wymaganƒÖ szeroko≈õƒá wykresu
            double barWidth = 60; // Minimalna szeroko≈õƒá s≈Çupka
            double gap = 10;      // Odstƒôp miƒôdzy s≈Çupkami
            double requiredWidth = results.size() * (barWidth + gap) + 100; // Dodaj margines

            // Ustaw minimalnƒÖ szeroko≈õƒá wykresu
            resultsChart.setMinWidth(requiredWidth);
            resultsChart.setPrefWidth(requiredWidth);

            // Oblicz sumƒô g≈Ços√≥w
            int totalVotes = results.stream().mapToInt(CandidateResult::getVotes).sum();

            // Usu≈Ñ stare dane i zresetuj wykres
            resultsChart.getData().clear();
            resultsChart.setAnimated(false); // Wy≈ÇƒÖcz animacje dla stabilno≈õci
            resultsChart.layout(); // Wymu≈õ przeliczenie uk≈Çadu


            XYChart.Series<String, Number> series = new XYChart.Series<>();
            int maxVotes = 0;

            // Ustal paletƒô kolor√≥w dla s≈Çupk√≥w
            String[] colors = {"#3498db", "#2ecc71", "#e74c3c", "#9b59b6", "#f1c40f", "#1abc9c", "#34495e"};

            for (int i = 0; i < results.size(); i++) {
                CandidateResult result = results.get(i);
                int votes = result.getVotes();
                String party = result.getParty();

                // Skr√≥ƒá d≈Çugie nazwy partii
                if (party != null && party.length() > 15) {
                    party = party.substring(0, 12) + "...";
                }

                // Formatuj etykietƒô kandydata
                String[] nameParts = result.getName().split(" ", 2);
                String formattedName = nameParts.length > 1
                        ? nameParts[0] + "\n" + nameParts[1]
                        : result.getName();
                String candidateLabel = formattedName + "\n(" + (party != null ? party : "brak") + ")";
                XYChart.Data<String, Number> data = new XYChart.Data<>(candidateLabel, votes);
                data.setExtraValue(result);
                series.getData().add(data);

                if (votes > maxVotes) maxVotes = votes;

                // Ustaw kolor s≈Çupka
                final String color = colors[i % colors.length];
                data.nodeProperty().addListener((obs, oldNode, newNode) -> {
                    if (newNode != null) {
                        newNode.setStyle("-fx-bar-fill: " + color + "; -fx-bar-padding: 5px;");
                    }
                });
            }

            Platform.runLater(() -> {
                resultsChart.setAnimated(false);
                resultsChart.requestLayout();
                // Minimalna wysoko≈õƒá dla czytelno≈õci
                resultsChart.setMinHeight(300);

                // Zapobieganie nadmiernemu rozciƒÖganiu
                resultsChart.setMaxHeight(Double.MAX_VALUE);

                // Automatyczne dopasowanie
                resultsChart.autosize();
            });

            resultsChart.getData().add(series);
            updateYAxisRange(maxVotes);

            // Ustawienia osi
            xAxis.setTickLabelRotation(0);
            xAxis.setTickLabelFont(Font.font("System", 10));
            xAxis.setMinHeight(Region.USE_PREF_SIZE);
            xAxis.setPrefHeight(50); // Zwiƒôksz wysoko≈õƒá osi X
            resultsChart.setCategoryGap(gap);
            resultsChart.setBarGap(1);
            // Zmniejszenie paddingu wykresu (dolny padding zwiƒôkszony dla etykiet)
            resultsChart.setPadding(new Insets(0, 0, 40, 0)); // Zmieniony padding

            // Dodaj etykiety na s≈Çupkach
            for (XYChart.Data<String, Number> data : series.getData()) {
                Node node = data.getNode();
                int votes = data.getYValue().intValue();
                double percent = totalVotes > 0 ? (votes * 100.0) / totalVotes : 0;
                CandidateResult candidate = (CandidateResult) data.getExtraValue();
                double barHeight = Math.max(votes * 1.0, 5);
                double labelPosition = barHeight / 2;

                // Formatowanie procent√≥w z pominiƒôciem ko≈Ñcowych zer
                String percentText;
                if (percent == (int) percent) {
                    percentText = String.format("%d%%", (int) percent); // Ca≈Çkowite warto≈õci: 50%
                } else if (percent * 10 == (int) (percent * 10)) {
                    percentText = String.format("%.1f%%", percent); // Jedno miejsce po przecinku: 12.5%
                } else {
                    percentText = String.format("%.2f%%", percent); // Dwa miejsca po przecinku: 12.34%
                }
                // Zamiana kropek na przecinki
                percentText = percentText.replace(".", ",");

                Label label = new Label(percentText);
                label.getStyleClass().add("chart-bar-label");
                label.setStyle("-fx-text-fill: white; -fx-font-size: 12px;");

                StackPane.setAlignment(label, Pos.CENTER);
                StackPane.setMargin(label, new Insets(-labelPosition, 0, 0, 0));
                label.setStyle("-fx-text-fill: white; -fx-font-size: 10px; -fx-font-weight: bold;");

                if (node != null) {
                    ((StackPane) node).getChildren().add(label);
                    node.setStyle("-fx-min-width: 40px; " + node.getStyle());
                }

                // Tooltip z tym samym formatowaniem procent√≥w
                Tooltip tooltip = new Tooltip(
                        "Kandydat: " + candidate.getName() +
                                "\nPartia: " + (candidate.getParty() != null ? candidate.getParty() : "brak") +
                                "\nG≈Çosy: " + votes +
                                "\nProcent: " + percentText
                );
                Tooltip.install(node, tooltip);

                node.setOnMouseClicked(event -> {
                    String candidateName = data.getXValue().split("\n")[0];
                    statusLabel.setText("Klikniƒôto na: " + candidateName);
                });
            }

            // Aktualizuj status z sumƒÖ g≈Ços√≥w
            statusLabel.setText(String.format(
                    "Wyniki zaktualizowane: %s | Suma g≈Ços√≥w: %d",
                    LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss")),
                    totalVotes
            ));
        } catch (Exception e) {
            statusLabel.setText("B≈ÇƒÖd podczas aktualizacji!");
            throw new DatabaseException("B≈ÇƒÖd od≈õwie≈ºania wynik√≥w", e);
        }
    }

    // Pomocnicza metoda do aktualizacji osi Y
    private void updateYAxisRange(int maxVotes) {
        if (yAxis != null) {
            yAxis.setAutoRanging(false);
            yAxis.setLowerBound(0);
            yAxis.setUpperBound(maxVotes < 5 ? 5 : maxVotes + 2); // Dodajemy margines
            yAxis.setTickUnit(maxVotes < 10 ? 1 : Math.max(1, maxVotes / 10));
            yAxis.setMinorTickVisible(false);
            //xAxis.setPrefWidth(candidatesData.size() * 80);
            // Ustaw preferowanƒÖ szeroko≈õƒá osi X na podstawie liczby kandydat√≥w
            xAxis.setPrefWidth(resultsChart.getMinWidth());

            // Przesuniƒôcie etykiety osi X
            Platform.runLater(() -> {
                for (Node node : xAxis.getChildrenUnmodifiable()) {
                    if (node instanceof Text text && "Kandydat".equals(text.getText())) {
                        text.setTranslateY(30); // Przesu≈Ñ w d√≥≈Ç
                    }
                }
            });
        }
    }

    // Nowa metoda do poprawiania pozycji etykiet
    private void fixLabelPositions() {
        for (int i = 0; i < resultsChart.getData().size(); i++) {
            XYChart.Series<String, Number> series = resultsChart.getData().get(i);
            for (int j = 0; j < series.getData().size(); j++) {
                XYChart.Data<String, Number> data = series.getData().get(j);
                Node node = data.getNode();
                if (node != null) {
                    // Popraw pozycjonowanie s≈Çupka
                    node.relocate(node.getLayoutX() - 5, node.getLayoutY());
                }

                // Popraw etykiety na osi
                if (j < xAxis.getCategories().size()) {
                    String category = xAxis.getCategories().get(j);
                    for (Node axisNode : xAxis.getChildrenUnmodifiable()) {
                        if (axisNode instanceof Text text) {
                            if (category.equals(text.getText())) {
                                text.setTextAlignment(TextAlignment.CENTER);
                                text.setWrappingWidth(80);
                                text.setLayoutY(text.getLayoutY() - 5); // Delikatne podniesienie
                            }
                        }
                    }
                }
            }
        }
    }

    // Aktualizuje skalƒô osi Y na wykresie
//    private void updateYAxisRange(int maxVotes) {
//        if (yAxis != null) {
//            yAxis.setAutoRanging(false);
//            yAxis.setLowerBound(0);
//            yAxis.setUpperBound(maxVotes < 5 ? 5 : maxVotes + 1);
//            yAxis.setTickUnit(1);
//            yAxis.setMinorTickVisible(false);
//        }
//    }

    // Obs≈Çuguje wylogowywanie u≈ºytkownika
    @FXML
    private void handleLogout(ActionEvent event) {
        try {
            Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            currentStage.close();

            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/election/view/login.fxml"));
            Stage loginStage = new Stage();
            loginStage.setScene(new Scene(loader.load()));
            loginStage.setTitle("Logowanie");
            Image icon = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/images/app_icon.png")));
            loginStage.getIcons().add(icon);
            loginStage.show();
        } catch (IOException e) {
            showErrorAlert("B≈ÇƒÖd logowania", e.getMessage());
        }
    }

    // Otwiera generator hash√≥w
    @FXML
    private void handleOpenHashGenerator(ActionEvent event) {
        try {
            Stage adminStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Stage hashStage = new Stage();
            HashGenerator hashGenerator = new HashGenerator();
            hashGenerator.setParentStage(adminStage);
            hashGenerator.start(hashStage);
        } catch (Exception e) {
            showErrorAlert("B≈ÇƒÖd generatora", e.getMessage());
        }
    }

    // Wy≈õwietla alert b≈Çƒôdu
    private void showErrorAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    // Filtruje u≈ºytkownik√≥w po numerze PESEL
    @FXML
    private void handlePeselSearch() {
        String pesel = peselSearchField.getText().trim();

        // Pobierz aktualnƒÖ listƒô u≈ºytkownik√≥w z bazy danych
        List<User> currentUsers = userDAO.getAllUsers();
        ObservableList<User> currentList = FXCollections.observableArrayList(currentUsers);

        if (pesel.isEmpty()) {
            usersTable.setItems(masterUserList);
            return;
        }

        // Filtruj na aktualnej li≈õcie
        ObservableList<User> filtered = currentList.filtered(user ->
                user.getPesel() != null && user.getPesel().contains(pesel)
        );

        usersTable.setItems(filtered);
    }

    // Resetuje filtr w tabeli u≈ºytkownik√≥w
    @FXML
    private void handleShowAllUsers() {
        usersTable.setItems(masterUserList);
        peselSearchField.clear();
    }

    // Eksportuje wyniki do pliku CSV
    @FXML
    private void handleExportToCSV() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Zapisz plik CSV");
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("CSV files (*.csv)", "*.csv"));
        File file = fileChooser.showSaveDialog(resultsTable.getScene().getWindow());

        if (file != null) {
            try (OutputStreamWriter writer = new OutputStreamWriter(
                    new FileOutputStream(file), StandardCharsets.UTF_8)) {

                writer.write('\uFEFF'); // BOM dla UTF-8
                writer.write("Kandydat;Liczba g≈Ços√≥w\n");

                for (CandidateResult result : resultsTable.getItems()) {
                    writer.write(result.getName() + ";" + result.getVotes() + "\n");
                }

                writer.flush();
            } catch (IOException e) {
                showError("B≈ÇƒÖd zapisu CSV: " + e.getMessage());
            }
        }
    }

    // Eksportuje wyniki do pliku PDF
    @FXML
    private void handleExportToPDF() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Zapisz plik PDF");
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("PDF files (*.pdf)", "*.pdf"));

        // Ustaw domy≈õlnƒÖ nazwƒô pliku z datƒÖ
        String defaultFileName = "wyniki_wyborow_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmm")) + ".pdf";
        fileChooser.setInitialFileName(defaultFileName);

        File file = fileChooser.showSaveDialog(resultsTable.getScene().getWindow());

        if (file != null) {
            try {
                ExportServicePDF.exportToPDF(candidateDAO.getAllCandidates(), file.getAbsolutePath());
                statusLabel.setText("Zapisano wyniki do: " + file.getName());
            } catch (Exception e) {
                statusLabel.setText("B≈ÇƒÖd eksportu do PDF");
                showError("B≈ÇƒÖd podczas eksportu do PDF: " + e.getMessage());
            }
        }
    }

    // Wy≈õwietla okno b≈Çƒôdu
    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("B≈ÇƒÖd");
        alert.setHeaderText("WystƒÖpi≈Ç b≈ÇƒÖd");
        alert.setContentText(message);
        alert.showAndWait();
    }

    // Metody zarzƒÖdzania u≈ºytkownikami
    @FXML
    private void handleAddUser() {
        try {
            validateUserForm(true);
            User newUser = createUserFromForm();
            userDAO.saveUser(newUser);

            // Dodane: od≈õwie≈º tabelƒô i wy≈õwietl komunikat sukcesu
            refreshUserTable();
            userManagementStatus.setText("U≈ºytkownik dodany pomy≈õlnie!");
            clearUserForm();

        } catch (ValidationException | DatabaseException e) {
            userManagementStatus.setText(e.getMessage());
        } catch (Exception e) {
            userManagementStatus.setText("Nieoczekiwany b≈ÇƒÖd: " + e.getMessage());
        }
    }

    @FXML
    private void handleUpdateUser() {
        if (currentEditUser == null) {
            userManagementStatus.setText("Wybierz u≈ºytkownika do edycji!");
            return;
        }

        // Sprawd≈∫, czy dokonano jakichkolwiek zmian
        boolean changesDetected = isChangesDetected();

        if (!changesDetected) {
            userManagementStatus.setText("Nie dokonano ≈ºadnych zmian!");
            return;
        }

        try {
            validateUserForm(false);

            // Walidacja zmiany ostatniego administratora
            String newRole = roleComboBox.getValue();
            if ("ADMIN".equals(currentEditUser.getRole()) &&
                    !"ADMIN".equals(newRole)) {

                int adminCount = userDAO.countAdmins();
                if (adminCount <= 1) {
                    userManagementStatus.setText(
                            "Nie mo≈ºna zmieniƒá roli ostatniego administratora!"
                    );
                    return;
                }
            }

            updateUserData(currentEditUser);
            userDAO.updateUser(currentEditUser);
            refreshUserTable();
            userManagementStatus.setText("Dane u≈ºytkownika zaktualizowane pomy≈õlnie!");

            // Wyczy≈õƒá formularz po aktualizacji
            handleClearUserForm();
        } catch (ValidationException | DatabaseException e) {
            userManagementStatus.setText(e.getMessage());
        } catch (Exception e) {
            userManagementStatus.setText("Nieoczekiwany b≈ÇƒÖd: " + e.getMessage());
        }
    }

    private boolean isChangesDetected() {
        boolean changesDetected = !firstNameField.getText().equals(currentEditUser.getFirstName());
        if (!lastNameField.getText().equals(currentEditUser.getLastName())) {
            changesDetected = true;
        }
        if (!peselField.getText().equals(currentEditUser.getPesel())) {
            changesDetected = true;
        }
        if (!usernameField.getText().equals(currentEditUser.getUsername())) {
            changesDetected = true;
        }
        if (!roleComboBox.getValue().equals(currentEditUser.getRole())) {
            changesDetected = true;
        }

        // Sprawd≈∫ zmianƒô has≈Ça (je≈õli u≈ºytkownik wpisa≈Ç co≈õ w pole has≈Ça)
        if (passwordChanged || !getPassword().isEmpty()) {
            changesDetected = true;
        }
        return changesDetected;
    }

    @FXML
    private void handleDeleteUser() {
        if (currentEditUser == null) {
            userManagementStatus.setText("Wybierz u≈ºytkownika do usuniƒôcia!");
            return;
        }

        try {
            // Walidacja ostatniego administratora
            if ("ADMIN".equals(currentEditUser.getRole())) {
                int adminCount = userDAO.countAdmins();
                if (adminCount <= 1) { // Je≈õli to ostatni admin
                    userManagementStatus.setText("Nie mo≈ºna usunƒÖƒá ostatniego administratora!");
                    return;
                }
            }

            if (confirmDeletion(currentEditUser)) {
                userDAO.deleteUser(currentEditUser);
                masterUserList.remove(currentEditUser);
                refreshUserTable();
                clearUserForm();
                userManagementStatus.setText("U≈ºytkownik usuniƒôty pomy≈õlnie!");
            }
        } catch (DatabaseException e) {
            userManagementStatus.setText(e.getMessage());
        }
    }

    private boolean confirmDeletion(User user) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Potwierdzenie usuniƒôcia");
        alert.setHeaderText("Czy na pewno chcesz usunƒÖƒá u≈ºytkownika?");
        alert.setContentText(user.getFirstName() + " " + user.getLastName() + " (" + user.getUsername() + ")");
        Optional<ButtonType> result = alert.showAndWait();
        return result.isPresent() && result.get() == ButtonType.OK;
    }

    // Walidacja formularza u≈ºytkownika
    private void validateUserForm(boolean isNewUser) throws ValidationException {
        if (firstNameField.getText().trim().isEmpty() ||
                lastNameField.getText().trim().isEmpty() ||
                peselField.getText().trim().isEmpty() ||
                usernameField.getText().trim().isEmpty() ||
                roleComboBox.getValue() == null)
        {
            throw new ValidationException("Wype≈Çnij wszystkie obowiƒÖzkowe pola!");
        }

        validatePesel();
        validateName(firstNameField.getText().trim(), "Imiƒô");
        validateName(lastNameField.getText().trim(), "Nazwisko");
        validateUsername();

        // Walidacja has≈Ça tylko dla nowego u≈ºytkownika
        if (isNewUser && getPassword().isEmpty()) {
            throw new ValidationException("Has≈Ço nie mo≈ºe byƒá puste!");
        }
    }

    // Tworzy obiekt u≈ºytkownika z danych formularza
    private User createUserFromForm() {
        User newUser = new User();
        newUser.setFirstName(firstNameField.getText().trim());
        newUser.setLastName(lastNameField.getText().trim());
        newUser.setPesel(peselField.getText().trim());
        newUser.setUsername(usernameField.getText().trim());
        newUser.setPassword(BCrypt.hashpw(getPassword(), BCrypt.gensalt()));
        newUser.setRole(roleComboBox.getValue());
        newUser.setHasVoted(false);
        return newUser;
    }

    // Aktualizuje dane u≈ºytkownika
    private void updateUserData(User user) {
        user.setFirstName(firstNameField.getText().trim());
        user.setLastName(lastNameField.getText().trim());
        user.setPesel(peselField.getText().trim());
        user.setUsername(usernameField.getText().trim());
        user.setRole(roleComboBox.getValue());

        // Aktualizuj has≈Ço, tylko je≈ºeli zosta≈Ço zmienione i nie jest puste
        if (passwordChanged && !getPassword().isEmpty()) {
            user.setPassword(BCrypt.hashpw(getPassword(), BCrypt.gensalt()));
        }
    }

    // Metody dla kandydat√≥w
    @FXML
    private void handleAddCandidate() {
        try {
            validateCandidateForm();

            String name = candidateNameField.getText().trim();
            String party = candidatePartyField.getText().trim();

            // Walidacja unikalno≈õci
            validateCandidateUniqueness(name, party);

            Candidate candidate = new Candidate();
            candidate.setName(name);
            candidate.setParty(party);
            candidate.setVotes(0);

            candidateDAO.addCandidate(candidate);
            refreshCandidatesTable();
            candidateStatusLabel.setText("Kandydat dodany pomy≈õlnie!");
            clearCandidateForm();
        } catch (ValidationException | DatabaseException e) {
            candidateStatusLabel.setText(e.getMessage());
        }
    }

    private void validateCandidateUniqueness(String name, String party) throws ValidationException {
        if (candidateDAO.candidateExists(name, party)) {
            throw new ValidationException("Kandydat o podanym imieniu, nazwisku i partii ju≈º istnieje!");
        }
    }

    @FXML
    private void handleUpdateCandidate() {
        Candidate selected = candidatesTable.getSelectionModel().getSelectedItem();
        if (selected == null) {
            candidateStatusLabel.setText("Wybierz kandydata do edycji");
            return;
        }

        try {
            validateCandidateForm();

            String newName = candidateNameField.getText().trim();
            String newParty = candidatePartyField.getText().trim();

            // Sprawdzenie czy wprowadzono zmiany
            boolean nameChanged = !newName.equals(selected.getName());
            boolean partyChanged = !newParty.equals(selected.getParty());

            if (!nameChanged && !partyChanged) {
                candidateStatusLabel.setText("Nie dokonano ≈ºadnych zmian!");
                return;
            }

            if (nameChanged || partyChanged) {
                validateCandidateUniqueness(newName, newParty);
            }

            selected.setName(newName);
            selected.setParty(newParty);

            candidateDAO.updateCandidate(selected);
            refreshCandidatesTable();
            candidateStatusLabel.setText("Zaktualizowano kandydata!");
            clearCandidateForm();
        } catch (ValidationException | DatabaseException e) {
            candidateStatusLabel.setText(e.getMessage());
        }
    }

    @FXML
    private void handleDeleteCandidate() {
        Candidate selected = candidatesTable.getSelectionModel().getSelectedItem();
        if (selected == null) {
            candidateStatusLabel.setText("Wybierz kandydata do usuniƒôcia");
            return;
        }

        if (selected.getVotes() > 0) {
            candidateStatusLabel.setText("Nie mo≈ºna usunƒÖƒá kandydata z g≈Çosami!");
            return;
        }

        try {
            candidateDAO.deleteCandidate(selected.getId());
            refreshCandidatesTable();
            candidateStatusLabel.setText("Usuniƒôto kandydata");
            clearCandidateForm();
        } catch (DatabaseException e) {
            candidateStatusLabel.setText("B≈ÇƒÖd: " + e.getMessage());
        }
    }

    @FXML
    private void handleRefreshCandidates() {
        refreshCandidatesTable();
    }

    @FXML
    private void handleClearCandidateForm() {
        clearCandidateForm();
        candidateStatusLabel.setText("Formularz wyczyszczony");
    }

    // Walidacja formularza kandydata
    private void validateCandidateForm() throws ValidationException {
        String name = candidateNameField.getText().trim();
        String party = candidatePartyField.getText().trim();

        if (name.isEmpty()) {
            throw new ValidationException("Imiƒô i nazwisko kandydata nie mo≈ºe byƒá puste!");
        }

        if (party.isEmpty()) {
            throw new ValidationException("Nazwa partii nie mo≈ºe byƒá pusta!");
        }

        if (!name.matches("[\\p{L}\\s\\-]+")) {
            throw new ValidationException("Imiƒô i nazwisko mo≈ºe zawieraƒá tylko litery, spacje i my≈õlniki!");
        }

        if (name.length() < 3) {
            throw new ValidationException("Imiƒô i nazwisko musi mieƒá co najmniej 3 znaki!");
        }
    }

    // Metody pomocnicze
    private void refreshCandidatesTable() {
        candidatesList.setAll(candidateDAO.getAllCandidates());
        candidatesTable.setItems(candidatesList);
    }

    private void clearCandidateForm() {
        candidateNameField.clear();
        candidatePartyField.clear();
        candidatesTable.getSelectionModel().clearSelection();
    }
}


åCIEØKA: src\main\java\com\election\controller\LoginController.java
----------------------------------------------------------------------
package com.election.controller;

import com.election.dao.UserDAO;
import com.election.model.User;
import com.election.service.AuthService;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.Objects;

// Kontroler ekranu logowania
public class LoginController {

    @FXML private TextField usernameField;
    @FXML private PasswordField passwordField;
    @FXML private Label errorLabel;
    @FXML private Label statusLabel;
    @FXML private Button showPasswordButton;
    @FXML private TextField visiblePasswordField;
    private final Image eyeOpenImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/images/eye-open.png")));
    private final Image eyeClosedImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/images/eye-closed.png")));
    private final ImageView eyeIcon = new ImageView();
    @FXML
    private void togglePasswordVisibility() {
        if (passwordField.isVisible()) {
            // Poka≈º has≈Ço
            visiblePasswordField.setText(passwordField.getText());
            visiblePasswordField.setVisible(true);
            visiblePasswordField.setManaged(true);
            passwordField.setVisible(false);
            passwordField.setManaged(false);

            eyeIcon.setImage(eyeClosedImage);
            showPasswordButton.setTooltip(new Tooltip("Ukryj has≈Ço"));
        } else {
            // Ukryj has≈Ço
            passwordField.setText(visiblePasswordField.getText());
            passwordField.setVisible(true);
            passwordField.setManaged(true);
            visiblePasswordField.setVisible(false);
            visiblePasswordField.setManaged(false);

            eyeIcon.setImage(eyeOpenImage);
            showPasswordButton.setTooltip(new Tooltip("Poka≈º has≈Ço"));
        }
    }

    private String getPassword() {
        return passwordField.isVisible() ?
                passwordField.getText() :
                visiblePasswordField.getText();
    }

    private final UserDAO userDAO = new UserDAO();
    private final AuthService authService = new AuthService();

    // Inicjalizuje kontroler i ≈Çaduje dane
    @FXML
    private void initialize() {
        loadUserCountAsync();

        // Ustawienie obrazka dla przycisku
        eyeIcon.setImage(eyeOpenImage);
        eyeIcon.setFitWidth(16);
        eyeIcon.setFitHeight(16);
        showPasswordButton.setGraphic(eyeIcon);
        // Ustaw tooltip
        Tooltip.install(showPasswordButton, new Tooltip("Poka≈º/ukryj has≈Ço"));
        // Ukryj widoczne pole has≈Ça na starcie
        visiblePasswordField.setVisible(false);
        visiblePasswordField.setManaged(false);
        // Upewnij siƒô, ≈ºe oba pola majƒÖ ten sam rozmiar
        visiblePasswordField.prefWidthProperty().bind(passwordField.widthProperty());
        visiblePasswordField.minWidthProperty().bind(passwordField.minWidthProperty());
        visiblePasswordField.maxWidthProperty().bind(passwordField.maxWidthProperty());
    }

    // Asynchronicznie ≈Çaduje liczbƒô u≈ºytkownik√≥w
    private void loadUserCountAsync() {
        Task<Integer> task = new Task<>() {
            @Override
            protected Integer call() {
                return userDAO.getAllUsers().size();
            }
        };
        new Thread(task).start();
    }
    // Obs≈Çuguje pr√≥bƒô logowania
    @FXML
    private void handleLogin(ActionEvent event) {
        String password = getPassword().trim();
        performLogin();
    }


    // Wykonuje proces logowania
    private void performLogin() {
        String username = usernameField.getText().trim();
        String password = getPassword().trim();

        if (username.isEmpty() || password.isEmpty()) {
            showError("Proszƒô wype≈Çniƒá wszystkie pola!");
            return;
        }

        Task<AuthService.AuthResult> loginTask = new Task<>() {
            @Override
            protected AuthService.AuthResult call() {
                return authService.authenticate(username, password);
            }
        };

        loginTask.setOnSucceeded(e -> {
            AuthService.AuthResult result = loginTask.getValue();
            switch (result.status()) {
                case SUCCESS:
                    redirectUser(result.user());
                    break;
                case USER_NOT_FOUND:
                case INVALID_PASSWORD:
                    // Ujednolicony komunikat dla obu przypadk√≥w
                    showError("Nieprawid≈Çowy login lub has≈Ço!");
                    break;
                default:
                    showError("WystƒÖpi≈Ç nieoczekiwany b≈ÇƒÖd");
                    break;
            }
        });

        loginTask.setOnFailed(e -> showError("B≈ÇƒÖd po≈ÇƒÖczenia z bazƒÖ danych"));

        new Thread(loginTask).start();
    }

    // Przekierowuje u≈ºytkownika do odpowiedniego panelu
    private void redirectUser(User user) {
        try {
            String fxmlPath = user.getRole().equals("ADMIN")
                    ? "/com/election/view/admin_view.fxml"
                    : "/com/election/view/user_view.fxml";

            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();

            if (user.getRole().equals("ADMIN")) {
                AdminController controller = loader.getController();
                controller.initializeWithUser(user);
            } else {
                UserController controller = loader.getController();
                controller.initializeWithUser(user); // Przeka≈º u≈ºytkownika
            }

            Stage stage = (Stage) usernameField.getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.centerOnScreen();

        } catch (IOException ex) {
            //noinspection CallToPrintStackTrace
            ex.printStackTrace();
            showError("B≈ÇƒÖd ≈Çadowania widoku");
        }
    }

    // Wy≈õwietla komunikat o b≈Çƒôdzie
    private void showError(String message) {
        errorLabel.setText(message);
        errorLabel.setStyle("-fx-text-fill: #ff4444;");
    }

    // Resetuje formularz logowania
    @FXML
    private void handleRefresh(ActionEvent event) {
        usernameField.clear();
        passwordField.clear();
        errorLabel.setText("");
    }
}


åCIEØKA: src\main\java\com\election\controller\UserController.java
---------------------------------------------------------------------
package com.election.controller;

import com.election.exception.ViewLoadingException;
import com.election.model.Candidate;
import com.election.model.User;
import com.election.service.ElectionService;
import com.election.service.VotingService;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.List;
import java.util.Objects;

// Kontroler panelu u≈ºytkownika
public class UserController {
    private User currentUser;
    private final VotingService votingService = new VotingService();
    @FXML
    private Label statusLabel;

    @FXML
    private ComboBox<Candidate> candidateComboBox;

    private final ElectionService electionService = new ElectionService();

    // Inicjalizuje kontroler i ≈Çaduje kandydat√≥w
    @FXML
    public void initialize() { // Ta metoda jest wywo≈Çywana automatycznie
        loadCandidates();
    }

    // Inicjalizuje kontroler z danymi u≈ºytkownika
    public void initializeWithUser(User user) {
        this.currentUser = user;

        if(user.isHasVoted()) {
            submitButton.setDisable(true);
            candidateComboBox.setDisable(true);
            statusLabel.setText("Ju≈º odda≈Çe≈õ g≈Ços w tych wyborach!");
            statusLabel.setStyle("-fx-text-fill: #2ecc71;");
        }
    }

    // Obs≈Çuguje oddanie g≈Çosu
    @FXML
    private void handleVoteSubmit() {
        Candidate selectedCandidate = candidateComboBox.getValue();

        if (selectedCandidate == null) {
            statusLabel.setText("Wybierz kandydata przed oddaniem g≈Çosu!");
            return;
        }

        votingService.castVote(currentUser, selectedCandidate);

        submitButton.setDisable(true);
        candidateComboBox.setDisable(true);
        statusLabel.setText("G≈Ços zosta≈Ç pomy≈õlnie zarejestrowany!");
        statusLabel.setStyle("-fx-text-fill: #2ecc71;");
    }

    // ≈Åaduje listƒô kandydat√≥w z bazy
    private void loadCandidates() {
        List<Candidate> candidates = electionService.getAllCandidates();
        candidateComboBox.getItems().setAll(candidates);
    }

    @FXML private Button submitButton;
    @FXML private Button logoutButton;

    // Obs≈Çuguje wylogowywanie
    @FXML
    private void handleLogout(ActionEvent event) {
        try {
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            stage.close();

            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/election/view/login.fxml"));
            Parent root = loader.load();
            Stage loginStage = new Stage();
            loginStage.setScene(new Scene(root));
            loginStage.setTitle("Logowanie");
            Image icon = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/images/app_icon.png")));
            loginStage.getIcons().add(icon);
            loginStage.show();
        } catch (IOException e) {
            throw new ViewLoadingException("B≈ÇƒÖd podczas ≈Çadowania widoku logowania", e);
        }
    }
}


åCIEØKA: src\main\java\com\election\dao\CandidateDAO.java
------------------------------------------------------------
package com.election.dao;

import com.election.exception.DatabaseException;
import com.election.model.Candidate;
import com.election.util.HibernateUtil;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;

import java.util.List;

public class CandidateDAO {

    // Pobierz wszystkich kandydat√≥w
    public List<Candidate> getAllCandidates() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.createQuery("FROM Candidate", Candidate.class).list();
        } catch (Exception e) {
            throw new DatabaseException("B≈ÇƒÖd podczas pobierania kandydat√≥w z bazy danych", e);
        }
    }

    public void addCandidate(Candidate candidate) throws DatabaseException {
        Transaction transaction = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            transaction = session.beginTransaction();
            session.persist(candidate);
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) transaction.rollback();
            throw new DatabaseException("B≈ÇƒÖd dodawania kandydata: " + e.getMessage(), e);
        }
    }

    public void deleteCandidate(Long id) throws DatabaseException {
        Transaction transaction = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            transaction = session.beginTransaction();
            Candidate candidate = session.get(Candidate.class, id);
            if (candidate != null) {
                // Sprawd≈∫ g≈Çosy przed usuniƒôciem
                if (candidate.getVotes() > 0) {
                    throw new DatabaseException("Nie mo≈ºna usunƒÖƒá kandydata z g≈Çosami!", null);
                }
                session.remove(candidate);
            }
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) transaction.rollback();
            throw new DatabaseException("B≈ÇƒÖd usuwania kandydata: " + e.getMessage(), e);
        }
    }

    public void updateCandidate(Candidate candidate) throws DatabaseException {
        Transaction transaction = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            transaction = session.beginTransaction();
            session.merge(candidate);
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) transaction.rollback();
            throw new DatabaseException("B≈ÇƒÖd aktualizacji kandydata: " + e.getMessage(), e);
        }
    }
    public boolean candidateExists(String name, String party) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            String hql = "SELECT COUNT(c) FROM Candidate c WHERE c.name = :name AND c.party = :party";
            Query<Long> query = session.createQuery(hql, Long.class);
            query.setParameter("name", name);
            query.setParameter("party", party);
            return query.uniqueResult() > 0;
        } catch (Exception e) {
            throw new DatabaseException("B≈ÇƒÖd podczas sprawdzania unikalno≈õci kandydata", e);
        }
    }
//
//    // Pobierz kandydata po ID
//    public Candidate getCandidateById(Long id) {
//        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
//            return session.get(Candidate.class, id);
//        } catch (Exception e) {
//            e.printStackTrace();
//            return null;
//        }
//    }
}



åCIEØKA: src\main\java\com\election\dao\UserDAO.java
-------------------------------------------------------
package com.election.dao;

import com.election.exception.DatabaseException;
import com.election.exception.ValidationException;
import com.election.model.User;
import com.election.util.HibernateUtil;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;

import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

// DAO dla u≈ºytkownik√≥w
public class UserDAO {

    // Pobiera wszystkich u≈ºytkownik√≥w
    public List<User> getAllUsers() throws DatabaseException {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.createQuery("FROM User", User.class).list();
        } catch (HibernateException e) {
            throw new DatabaseException("B≈ÇƒÖd pobierania u≈ºytkownik√≥w z bazy danych", e);
        }
    }

    // Pobiera u≈ºytkownika po ID
    public User getUserById(Long id) throws DatabaseException {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.get(User.class, id);
        } catch (HibernateException e) {
            throw new DatabaseException("B≈ÇƒÖd pobierania u≈ºytkownika o ID: " + id, e);
        }
    }

    // Aktualizuje dane u≈ºytkownika
    public void updateUser(User user) throws DatabaseException {
        // Najpierw walidacja w osobnej sesji
        validateUniqueConstraints(user);

        Transaction transaction = null;
        Session session = null;
        try {
            session = HibernateUtil.getSessionFactory().openSession();
            transaction = session.beginTransaction();

            // ≈Åadujemy u≈ºytkownika z bazy danych
            User managedUser = session.get(User.class, user.getId());

            // Je≈õli u≈ºytkownik nie istnieje
            if (managedUser == null) {
                throw new DatabaseException("U≈ºytkownik nie istnieje w systemie", null);
            }

            // Aktualizacja p√≥l tylko je≈õli u≈ºytkownik istnieje
            managedUser.setFirstName(user.getFirstName());
            managedUser.setLastName(user.getLastName());
            managedUser.setPesel(user.getPesel());
            managedUser.setUsername(user.getUsername());
            managedUser.setRole(user.getRole());

            // Aktualizacja has≈Ça tylko je≈õli zosta≈Ço zmienione
            if (user.getPassword() != null && !user.getPassword().isEmpty()) {
                managedUser.setPassword(user.getPassword());
            }

            session.merge(managedUser);
            transaction.commit();
            appendUserToSql(managedUser);
        } catch (ValidationException | HibernateException e) {
            if (transaction != null && transaction.isActive()) {
                transaction.rollback();
            }
            throw new DatabaseException(e.getMessage(), e);
        } catch (IOException e) {
            throw new DatabaseException("B≈ÇƒÖd tworzenia kopii zapasowej u≈ºytkownika", e);
        } finally {
            if (session != null && session.isOpen()) {
                session.close();
            }
        }
    }

    // Usuwa u≈ºytkownika z bazy
    public void deleteUser(User user) throws DatabaseException {
        Transaction transaction = null;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            transaction = session.beginTransaction();
            session.remove(user); // Zamiast session.delete(user)
            transaction.commit();
        } catch (HibernateException e) {
            if (transaction != null) transaction.rollback();
            throw new DatabaseException("B≈ÇƒÖd usuwania u≈ºytkownika: " + user.getUsername(), e);
        }
    }

    // Walidacja w osobnej sesji
    private void validateUniqueConstraints(User user) throws ValidationException {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            // Sprawd≈∫ unikalno≈õƒá loginu
            Query<User> usernameQuery = session.createQuery(
                    "FROM User WHERE username = :username AND id != :id", User.class);
            usernameQuery.setParameter("username", user.getUsername());
            usernameQuery.setParameter("id", user.getId() != null ? user.getId() : -1L);

            if (!usernameQuery.getResultList().isEmpty()) {
                throw new ValidationException("Login ju≈º istnieje w systemie!");
            }

            // Sprawd≈∫ unikalno≈õƒá PESEL
            Query<User> peselQuery = session.createQuery(
                    "FROM User WHERE pesel = :pesel AND id != :id", User.class);
            peselQuery.setParameter("pesel", user.getPesel());
            peselQuery.setParameter("id", user.getId() != null ? user.getId() : -1L);

            if (!peselQuery.getResultList().isEmpty()) {
                throw new ValidationException("PESEL ju≈º istnieje w systemie!");
            }
        }
    }

    // Zapisuje nowego u≈ºytkownika
    public void saveUser(User user) throws DatabaseException {
        Transaction transaction = null;
        Session session = null;
        try {
            session = HibernateUtil.getSessionFactory().openSession();
            transaction = session.beginTransaction();

            // Walidacja unikalno≈õci w osobnej sesji
            validateUniqueConstraints(user);

            session.persist(user);
            transaction.commit();
            appendUserToSql(user);
        } catch (ValidationException | HibernateException e) {
            if (transaction != null) transaction.rollback();
            throw new DatabaseException(e.getMessage(), e);
        } catch (IOException e) {
            throw new DatabaseException("B≈ÇƒÖd tworzenia kopii zapasowej u≈ºytkownika", e);
        } finally {
            if (session != null) session.close();
        }
    }



    // Dodaje u≈ºytkownika do pliku SQL (backup)
    private static void appendUserToSql(User user) throws IOException {
        String filePath = "src/main/resources/import_dynamic.sql";
        String insert = String.format(
                "INSERT INTO USERS (id, username, password, role, has_voted) VALUES (%d, '%s', '%s', '%s', %b);%n",
                user.getId(),
                user.getUsername(),
                user.getPassword(),
                user.getRole(),
                user.isHasVoted()
        );

        try (FileWriter fw = new FileWriter(filePath, true)) {
            fw.write(insert);
        }
    }

    public int countAdmins() throws DatabaseException {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            Query<Long> query = session.createQuery(
                    "SELECT COUNT(*) FROM User WHERE role = 'ADMIN'",
                    Long.class
            );
            return Math.toIntExact(query.uniqueResult());
        } catch (HibernateException e) {
            throw new DatabaseException("B≈ÇƒÖd podczas zliczania administrator√≥w", e);
        }
    }

    // Wyszukuje u≈ºytkownika po loginie
    public User findByUsername(String username) throws DatabaseException {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            Query<User> query = session.createQuery(
                    "FROM User WHERE username = :username", User.class
            );
            query.setParameter("username", username);
            return query.uniqueResult();
        } catch (HibernateException e) {
            throw new DatabaseException("B≈ÇƒÖd wyszukiwania u≈ºytkownika po loginie: " + username, e);
        }
    }

    // Wyszukuje u≈ºytkownika po numerze PESEL
    public User findByPesel(String pesel) throws DatabaseException {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            Query<User> query = session.createQuery(
                    "FROM User WHERE pesel = :pesel", User.class
            );
            query.setParameter("pesel", pesel);
            return query.uniqueResult();
        } catch (HibernateException e) {
            throw new DatabaseException("B≈ÇƒÖd wyszukiwania u≈ºytkownika po PESEL: " + pesel, e);
        }
    }
}



åCIEØKA: src\main\java\com\election\exception\DatabaseException.java
-----------------------------------------------------------------------
package com.election.exception;

public class DatabaseException extends RuntimeException {
  public DatabaseException(String message) {
    super(message);
  }

  public DatabaseException(String message, Throwable cause) {
    super(message, cause);
  }
}



åCIEØKA: src\main\java\com\election\exception\ServiceException.java
----------------------------------------------------------------------
package com.election.exception;

public class ServiceException extends RuntimeException {
    public ServiceException(String message) {
        super(message);
    }
    public ServiceException(String message, Throwable cause) {
        super(message, cause);
    }
}



åCIEØKA: src\main\java\com\election\exception\ValidationException.java
-------------------------------------------------------------------------
package com.election.exception;

public class ValidationException extends RuntimeException {
  public ValidationException(String message) {
    super(message);
  }
}



åCIEØKA: src\main\java\com\election\exception\ViewLoadingException.java
--------------------------------------------------------------------------
package com.election.exception;

public class ViewLoadingException extends RuntimeException {
  public ViewLoadingException(String message, Throwable cause) {
    super(message, cause);
  }
}



åCIEØKA: src\main\java\com\election\exception\VotingException.java
---------------------------------------------------------------------
package com.election.exception;

public class VotingException extends Exception {
    public VotingException(String message) {
        super(message);
    }
}


åCIEØKA: src\main\java\com\election\model\Candidate.java
-----------------------------------------------------------
package com.election.model;

import javafx.beans.property.*;
import jakarta.persistence.*;

@Entity
@Table(name = "CANDIDATE")
public class Candidate {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    private String party;

    @Column(nullable = false)
    private int votes;

    // Transient properties dla JavaFX
    private transient StringProperty nameProperty;
    private transient IntegerProperty votesProperty;

    // Konstruktory
    public Candidate() {
        // Domy≈õlny konstruktor dla JPA
    }

    public Candidate(String name, String party, int votes) {
        this.name = name;
        this.party = party;
        this.votes = votes;
        initializeProperties();
    }

    // Inicjalizacja w≈Ça≈õciwo≈õci JavaFX
    private void initializeProperties() {
        this.nameProperty = new SimpleStringProperty(name);
        this.votesProperty = new SimpleIntegerProperty(votes);
    }

    // Gettery i settery dla JPA
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
        if (nameProperty != null) {
            nameProperty.set(name);
        }
    }

    public String getParty() {
        return party;
    }

    public void setParty(String party) {
        this.party = party;
    }

    public int getVotes() {
        return votes;
    }

    public void setVotes(int votes) {
        this.votes = votes;
        if (votesProperty != null) {
            votesProperty.set(votes);
        }
    }

    // W≈Ça≈õciwo≈õci JavaFX
    public StringProperty nameProperty() {
        if (nameProperty == null) {
            nameProperty = new SimpleStringProperty(name);
        }
        return nameProperty;
    }

    public IntegerProperty votesProperty() {
        if (votesProperty == null) {
            votesProperty = new SimpleIntegerProperty(votes);
        }
        return votesProperty;
    }

    @Override
    public String toString() {
        return name + (party != null ? " (" + party + ")" : "");
    }
}


åCIEØKA: src\main\java\com\election\model\CandidateResult.java
-----------------------------------------------------------------
package com.election.model;

public class CandidateResult {
    private Long id;          // Dodano pole id
    private String name;      // Zmieniono candidateName ‚Üí name
    private String party;
    private int votes;

    // Konstruktor z 4 parametrami (id, name, party, votes)
    public CandidateResult(Long id, String name, String party, int votes) {
        this.id = id;
        this.name = name;
        this.party = party;
        this.votes = votes;
    }

    // Gettery
    public Long getId() { return id; }
    public String getName() { return name; } // Zmieniono getCandidateName ‚Üí getName
    public String getParty() { return party; }
    public int getVotes() { return votes; }
}


åCIEØKA: src\main\java\com\election\model\ElectionResult.java
----------------------------------------------------------------
package com.election.model;

import jakarta.persistence.*;

@Entity
@Table(name = "election_results")
public class ElectionResult {
    @Column(name = "candidate_name") // Dopasuj do nazwy kolumny w bazie
    private String candidateName;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private int votes;

    // Konstruktor domyƒπ‚Ä∫lny (wymagany przez Hibernate)
    public ElectionResult() {}

    // Konstruktor z parametrami
    public ElectionResult(String candidateName, int votes) {
        this.candidateName = candidateName;
        this.votes = votes;
    }

    // Gettery i settery
    public Long getId() { return id; }
    public String getCandidateName() { return candidateName; }
    public void setCandidateName(String candidateName) { this.candidateName = candidateName; }
    public int getVotes() { return votes; }
    public void setVotes(int votes) { this.votes = votes; }
}



åCIEØKA: src\main\java\com\election\model\User.java
------------------------------------------------------
package com.election.model;

import javafx.beans.property.*;
import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "USERS")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String username;

    @Column(nullable = false)
    private String password;

    @Column(nullable = false)
    private String role;

    @Column(name = "first_name", nullable = false)
    private String firstName;

    @Column(name = "last_name", nullable = false)
    private String lastName;

    @Column(name = "pesel", nullable = false, unique = true, length = 11)
    private String pesel;

    @Column(name = "has_voted", nullable = false)
    private boolean hasVoted = false;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
    private List<Vote> votes = new ArrayList<>();

    public List<Vote> getVotes() {
        return votes;
    }

    public void setVotes(List<Vote> votes) {
        this.votes = votes;
    }
    // Getters & Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }

    public boolean isHasVoted() {
        return hasVoted;
    }

    public void setHasVoted(boolean hasVoted) {
        this.hasVoted = hasVoted;
    }

    public String getRole() { return role; }
    public void setRole(String role) { this.role = role; }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getPesel() {
        return pesel;
    }

    public void setPesel(String pesel) {
        if (pesel == null || !pesel.matches("\\d{11}")) {
            throw new IllegalArgumentException("Nieprawid≈Çowy PESEL - musi mieƒá 11 cyfr");
        }
        this.pesel = pesel;
    }

    public User() {}

}


åCIEØKA: src\main\java\com\election\model\Vote.java
------------------------------------------------------
package com.election.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "VOTES")
public class Vote {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    @ManyToOne
    @JoinColumn(name = "candidate_id")
    private Candidate candidate;

    @Column(name = "has_voted", nullable = false)
    private boolean hasVoted;

    @Column(name = "vote_time", nullable = false)
    private LocalDateTime voteTime;

    // Gettery i Settery
    public Long getId() {
        return id;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }


    public Candidate getCandidate() {
        return candidate;
    }

    public void setCandidate(Candidate candidate) {
        this.candidate = candidate;
    }

    public LocalDateTime getVoteTime() {
        return voteTime;
    }

    public void setVoteTime(LocalDateTime voteTime) {
        this.voteTime = voteTime;
    }
    public boolean isHasVoted() {
        return hasVoted;
    }

    public void setHasVoted(boolean hasVoted) {
        this.hasVoted = hasVoted;
    }
}


åCIEØKA: src\main\java\com\election\service\AuthService.java
---------------------------------------------------------------
package com.election.service;

import com.election.dao.UserDAO;
import com.election.model.User;
import org.mindrot.jbcrypt.BCrypt;

// Serwis uwierzytelniania
public class AuthService {
    private final UserDAO userDAO = new UserDAO();

    // Weryfikuje dane logowania
    public AuthResult authenticate(String username, String password) {
        User user = userDAO.findByUsername(username);
        if (user == null) {
            return new AuthResult(null, AuthStatus.USER_NOT_FOUND);
        }
        if (!BCrypt.checkpw(password, user.getPassword())) {
            return new AuthResult(null, AuthStatus.INVALID_PASSWORD);
        }
        return new AuthResult(user, AuthStatus.SUCCESS);
    }

    // Statusy uwierzytelniania
    public enum AuthStatus {
        SUCCESS, USER_NOT_FOUND, INVALID_PASSWORD
    }

    // Klasa wynik√≥w uwierzytelniania
        public record AuthResult(User user, AuthStatus status) {
    }
}


åCIEØKA: src\main\java\com\election\service\ElectionService.java
-------------------------------------------------------------------
package com.election.service;

import com.election.exception.VotingException;
import com.election.model.Candidate;
import com.election.model.CandidateResult;
import com.election.util.HibernateUtil;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import java.util.List;

// Serwis wyborczy
public class ElectionService {

    // Pobiera aktualne wyniki wybor√≥w
    public List<CandidateResult> getCurrentResults() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            String hql = "SELECT new com.election.model.CandidateResult(c.id, c.name, c.party, c.votes) FROM Candidate c";
            return session.createQuery(hql, CandidateResult.class).getResultList();
        }
    }

    // Pobiera wszystkich kandydat√≥w
    public List<Candidate> getAllCandidates() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.createQuery("FROM Candidate", Candidate.class).getResultList();
        }
    }

    // Rejestruje g≈Ços na kandydata
    public void registerVote(Candidate candidate) throws VotingException {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = null;

        try {
            transaction = session.beginTransaction();

            Candidate managedCandidate = session.get(Candidate.class, candidate.getId());
            managedCandidate.setVotes(managedCandidate.getVotes() + 1);

            session.update(managedCandidate);
            transaction.commit();

        } catch (Exception e) {
            if (transaction != null) transaction.rollback();
            throw new VotingException("B≈ÇƒÖd podczas rejestracji g≈Çosu: " + e.getMessage());
        } finally {
            session.close();
        }
    }
}


åCIEØKA: src\main\java\com\election\service\ExportServicePDF.java
--------------------------------------------------------------------
package com.election.service;

import com.election.model.Candidate;
import com.lowagie.text.*;
import com.lowagie.text.pdf.BaseFont;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

// Serwis eksportu do PDF
public class ExportServicePDF {

    // Eksportuje wyniki do pliku PDF
    public static void exportToPDF(List<Candidate> candidates, String filePath) throws Exception {
        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(filePath));
        document.open();

        // Dodaj czcionkƒô z obs≈ÇugƒÖ polskich znak√≥w
        BaseFont bf = BaseFont.createFont("c:/windows/fonts/arial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
        Font font = new Font(bf, 12);

        // Nag≈Ç√≥wek z datƒÖ
        document.add(new Paragraph("Wyniki wybor√≥w - " + LocalDate.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")), font));
        document.add(new Paragraph(" "));

        // Tabela z danymi
        PdfPTable table = new PdfPTable(4);
        table.setWidthPercentage(100);

        // Nag≈Ç√≥wki tabeli
        table.addCell(createCell("ID", font, Element.ALIGN_CENTER));
        table.addCell(createCell("Nazwisko i Imiƒô", font, Element.ALIGN_CENTER));
        table.addCell(createCell("Partia", font, Element.ALIGN_CENTER));
        table.addCell(createCell("Liczba g≈Ços√≥w", font, Element.ALIGN_CENTER));

        // Wiersze z danymi
        for (Candidate c : candidates) {
            table.addCell(createCell(String.valueOf(c.getId()), font, Element.ALIGN_CENTER));
            table.addCell(createCell(c.getName(), font, Element.ALIGN_LEFT));
            table.addCell(createCell(c.getParty() != null ? c.getParty() : "", font, Element.ALIGN_LEFT));
            table.addCell(createCell(String.valueOf(c.getVotes()), font, Element.ALIGN_CENTER));
        }

        document.add(table);
        document.close();
    }

    // Pomocnicza metoda do tworzenia kom√≥rek z formatowaniem
    private static PdfPCell createCell(String content, Font font, int alignment) {
        PdfPCell cell = new PdfPCell(new Phrase(content, font));
        cell.setHorizontalAlignment(alignment);
        cell.setPadding(5);
        return cell;
    }
}



åCIEØKA: src\main\java\com\election\service\VotingService.java
-----------------------------------------------------------------
package com.election.service;

import com.election.exception.ServiceException;
import com.election.model.Candidate;
import com.election.model.User;
import com.election.model.Vote;
import com.election.util.HibernateUtil;
import org.hibernate.Session;
import org.hibernate.Transaction;

import java.time.LocalDateTime;

// Serwis g≈Çosowania
public class VotingService {

    // Rejestruje g≈Ços u≈ºytkownika
    public void castVote(User user, Candidate candidate) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();

            if (user == null || candidate == null) {
                throw new IllegalStateException("Nie znaleziono u≈ºytkownika lub kandydata.");
            }

            // Sprawd≈∫ w bazie czy u≈ºytkownik ju≈º g≈Çosowa≈Ç
            User managedUser = session.get(User.class, user.getId());
            if (managedUser == null) {
                throw new IllegalStateException("U≈ºytkownik nie istnieje w bazie danych!");
            }

            if (managedUser.isHasVoted()) {
                throw new IllegalStateException("U≈ºytkownik ju≈º g≈Çosowa≈Ç.");
            }

            // Zwiƒôksz liczbƒô g≈Ços√≥w
            Candidate managedCandidate = session.get(Candidate.class, candidate.getId());
            if (managedCandidate == null) {
                throw new IllegalStateException("Kandydat nie istnieje w bazie danych!");
            }

            managedCandidate.setVotes(managedCandidate.getVotes() + 1);
            session.merge(managedCandidate);

            // Utw√≥rz nowy g≈Ços
            Vote vote = new Vote();
            vote.setCandidate(managedCandidate);
            vote.setUser(managedUser);
            vote.setVoteTime(LocalDateTime.now());
            session.persist(vote);

            // Zaktualizuj u≈ºytkownika
            managedUser.setHasVoted(true);
            session.merge(managedUser);

            tx.commit();
        } catch (Exception e) {
            if (tx != null && tx.isActive()) {
                tx.rollback();
            }
            throw new ServiceException("B≈ÇƒÖd podczas g≈Çosowania: " + e.getMessage(), e);
        } finally {
            if (session != null && session.isOpen()) {
                session.close();
            }
        }
    }
}


åCIEØKA: src\main\java\com\election\util\DataInitializer.java
----------------------------------------------------------------
package com.election.util;

import org.hibernate.Session;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.sql.Statement;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

// Inicjalizator danych
public class DataInitializer {

    // Inicjalizuje bazƒô danych je≈õli jest pusta
    public static void initializeIfEmpty(Session session) {
        boolean shouldImport = isDatabaseEmpty(session);

        if (shouldImport) {
            System.out.println("Import danych z import.sql...");
            runImportSQL(session);
        } else {
            System.out.println("Baza danych ju≈º zawiera dane. Import pominiƒôty.");
        }
    }

    // Sprawdza czy baza jest pusta
    private static boolean isDatabaseEmpty(Session session) {
        List<?> users = session.createQuery("from User").setMaxResults(1).list();
        List<?> candidates = session.createQuery("from Candidate").setMaxResults(1).list();
        return users.isEmpty() && candidates.isEmpty();
    }

    // Wykonuje skrypty SQL
    private static void runImportSQL(Session session) {
        runSqlFile(session, "import.sql");
        runSqlFile(session, "import_dynamic.sql");
    }

    // Wykonuje pojedynczy plik SQL
    private static void runSqlFile(Session session, String fileName) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(
                Objects.requireNonNull(DataInitializer.class.getClassLoader().getResourceAsStream(fileName))))) {

            String sql = reader.lines().collect(Collectors.joining("\n"));

            session.doWork(connection -> {
                try (Statement stmt = connection.createStatement()) {
                    for (String part : sql.split(";")) {
                        if (!part.trim().isEmpty()) {
                            stmt.execute(part.trim());
                        }
                    }
                }
            });

            System.out.println("Zaimportowano dane z " + fileName);

        } catch (Exception e) {
            System.err.println("B≈ÇƒÖd przy imporcie pliku " + fileName + ": " + e.getMessage());
        }
    }

}



åCIEØKA: src\main\java\com\election\util\HibernateUtil.java
--------------------------------------------------------------
package com.election.util;

import com.election.model.ElectionResult;
import com.election.model.User;
import com.election.model.Candidate;
import com.election.model.Vote;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.service.ServiceRegistry;

// Narzƒôdzia Hibernate
public class HibernateUtil {
    private static final SessionFactory sessionFactory = buildSessionFactory();

    // Buduje fabrykƒô sesji
    private static SessionFactory buildSessionFactory() {
        try {
            // Wczytaj konfiguracjƒô z hibernate.cfg.xml z classpath
            Configuration configuration = new Configuration().configure();

            // Dodaj klasy mapowane
            configuration.addAnnotatedClass(User.class);
            configuration.addAnnotatedClass(Candidate.class);
            configuration.addAnnotatedClass(Vote.class);
            configuration.addAnnotatedClass(ElectionResult.class);

            ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
                    .applySettings(configuration.getProperties())
                    .build();

            return configuration.buildSessionFactory(serviceRegistry);

        } catch (Throwable ex) {
            System.err.println("Initial SessionFactory creation failed." + ex);
            throw new ExceptionInInitializerError(ex);
        }
    }

    // Zwraca fabrykƒô sesji
    public static SessionFactory getSessionFactory() {
        return sessionFactory;
    }

    // Zamyka po≈ÇƒÖczenia
    public static void shutdown() {
        if (sessionFactory != null) {
            sessionFactory.close();
        }
    }
}


åCIEØKA: src\main\resources\com\election\css\admin-styles.css
----------------------------------------------------------------
/* ADMIN-STYLES.CSS - ZOPTYMALIZOWANA WERSJA */

/* ===== ZGROMADZONE SELEKTORY ===== */
.root-style, .header-style, .footer-style,
.results-table, .results-chart, .chart-container,
.split-pane-bg, .chart-plot-background,
.candidate-combo, .candidate-combo .list-view,
#candidatesTable, .scroll-pane .table-view {
    -fx-background-color: #2c3e50;
}

.white-text, .panel-title, .app-title,
.form-label, .footer-text, .radio-button,
.results-chart, .results-chart .chart-title,
.results-chart .axis-label, .results-chart .axis,
.results-table .table-cell, .results-table .column-header .label,
.x-axis, .chart-axis-label, .axis-label,
.axis, .column-header-label {
    -fx-tick-label-fill: white !important;
    -fx-text-fill: white !important;
}

/* ===== ELEMENTY WSP√ìLNE ===== */
.compact-table {
    -fx-max-height: 250px;
    -fx-font-size: 11px;
}

.table-row-cell {
    -fx-cell-size: 25px;
}

.button {
    -fx-padding: 5px 15px;
}

/* ===== SPECYFICZNE STYLE ===== */
/* Formularze */
#userFormGrid {
    -fx-padding: 10px;
    -fx-background-color: rgba(255, 255, 255, 0.1);
    -fx-background-radius: 5px;
}

/* Przyciski */
.button-generate {
    -fx-base: #3498db;
    -fx-padding: 8px 20px;
}
.button-generate:hover,
.button-refresh:hover,
.button-export:hover {
    -fx-background-color: #2980b9;
    -fx-cursor: hand;
}

.button-add { -fx-base: #27ae60; }
.button-save { -fx-base: #3498db; }
.button-delete { -fx-base: #e74c3c; }

.button-generate,
.button-refresh,
.button-export {
    -fx-font-size: 14px;
    -fx-pref-height: 44px;
    -fx-min-width: 120px;
    -fx-background-color: #3498db;
    -fx-text-fill: white;
}

.button-logout {
    -fx-font-size: 14px;
    -fx-pref-height: 44px;
    -fx-min-width: 120px;
    -fx-text-fill: white;
}

/* Kontenery */
.tools-container {
    -fx-padding: 30px 0 0 0;
}

.split-pane-bg {
    -fx-background-radius: 0;
    -fx-padding: 0;
    -fx-min-height: 450px;
    -fx-pref-height: 450px;
    -fx-max-height: Infinity;
}

.results-table, .results-chart {
    -fx-min-height: 400px;
    -fx-pref-height: 400px;
    -fx-max-height: Infinity;
}

.results-table {
    -fx-min-width: 300px;
    -fx-pref-width: 400px;
    -fx-max-width: 600px;
    -fx-padding: 0 0 10px 0;
    -fx-table-cell-height: 35px;
}

.chart-container {
    -fx-background-radius: 5px;
    -fx-padding: 5px;
}

.results-chart {
    -fx-font-size: 16px;
    -fx-min-width: 325px;
}

.chart-bar {
    -fx-bar-fill: #3498db;
    -fx-bar-padding: 5px;
    -fx-min-width: 40px;
}
/* Pogrubienie procent√≥w */
.chart-bar-label {
    -fx-font-weight: bold !important;
}

.chart-bar .chart-label {
    -fx-text-fill: white !important;
}
.chart-legend {
    -fx-text-fill: white !important;
}
.chart-content {
    -fx-padding: 0;
}

.results-table .column-header-background {
    -fx-pref-height: 60px;
    -fx-max-height: 60px;
    -fx-background-color: rgba(0, 0, 0, 0.3);
    -fx-border-color: rgba(255,255,255,0.3);
    -fx-border-width: 0 0 2px 0;
    -fx-padding: 0 0 0 0; /* Zmieniono padding */
}

.results-table .table-cell {
    -fx-border-color: rgba(255, 255, 255, 0.1);
    -fx-alignment: CENTER;
    -fx-wrap-text: true;
    -fx-padding: 5px;
    -fx-text-fill: white !important;
    -fx-border-width: 0 1px 1px 0;
}

/* Usu≈Ñ liniƒô z ostatniej kom√≥rki w wierszu */
.results-table .table-cell:last-child {
    -fx-border-width: 0 0 1px 0;
}

.split-pane-bg > .scroll-pane {
    -fx-hbar-policy: never;
}

.results-table .table-row-cell {
    -fx-background-color: transparent;
    -fx-cell-size: 35px;
    -fx-min-height: 35px;
    -fx-pref-height: 35px;
}

.results-table .table-row-cell:odd {
    -fx-background-color: rgba(0, 0, 0, 0.1);
}

.chart-horizontal-grid-lines,
.chart-vertical-grid-lines {
    -fx-stroke: #aaaaaa;
    -fx-stroke-dash-array: 2 5;
}

/* Listy rozwijane */
.candidate-combo {
    -fx-pref-height: 65px;
    -fx-pref-width: 450px;
    -fx-font-size: 25px;
}

.candidate-combo .list-cell {
    -fx-background-color: #34495e;
}

.candidate-combo .list-cell:filled:hover {
    -fx-background-color: #2c3e50;
}

/* Przyciski g≈Çosowania */
.button-vote {
    -fx-font-size: 36px;
    -fx-base: #27ae60;
    -fx-pref-width: 450px;
    -fx-text-fill: white;
    -fx-font-weight: bold;
}

/* Nag≈Ç√≥wki i etykiety */
.column-header-label {
    -fx-font-weight: bold;
    -fx-alignment: center;
    -fx-text-alignment: center;
    -fx-wrap-text: true;
    -fx-font-size: 12px;
    -fx-padding: 0 5px;
    -fx-max-width: Infinity;
}

.results-table .column-header {
    -fx-size: 40px;
    -fx-pref-height: 40px;
    -fx-background-color: transparent;
    -fx-padding: 0 0 0 0;
    -fx-border-color: rgba(255,255,255,0.2);
    -fx-border-width: 0 1px 0 0;
}

/* Usu≈Ñ liniƒô z ostatniej kolumny */
.results-table .column-header:last-child {
    -fx-border-width: 0;
}

.results-table .column-header .label {
    -fx-font-weight: bold;
    -fx-font-size: 12px;
    -fx-padding: 10px 0;
    -fx-alignment: CENTER;
    -fx-wrap-text: true;
    -fx-max-height: 35px;
    -fx-padding: 0 5px;
}

/* Specyficzne ustawienia */
.results-table {
    -fx-min-width: 350px;
}

.scroll-pane {
    -fx-background-color: transparent;
}

.scroll-pane .viewport {
    -fx-background-color: #2c3e50;
}

.split-pane > .split-pane-divider {
    -fx-padding: 0 0.5em;
}
.split-pane-divider {
    -fx-background-color: #3498db;  /* niebieski kolor g≈Ç√≥wny */
    -fx-background-insets: 0;
    -fx-padding: 0 0.5em 0 0.5em;  /* zwiƒôkszenie obszaru klikalnego */
    -fx-background-radius: 2px;     /* lekko zaokrƒÖglone rogi */
    -fx-border-color: #2980b9;      /* ciemniejszy niebieski dla obramowania */
    -fx-border-width: 1px;
    -fx-border-radius: 2px;
}
/* Efekt hover - rozja≈õnienie i animacja */
.split-pane-divider:hover {
    -fx-background-color: #2980b9;  /* ja≈õniejszy odcie≈Ñ niebieskiego */
    -fx-border-color: #1c638e;       /* ciemniejszy odcie≈Ñ dla kontrastu */
    -fx-cursor: h-resize;            /* kursor wskazujƒÖcy mo≈ºliwo≈õƒá przeciƒÖgania */
    -fx-effect: dropshadow(gaussian, rgba(41,128,185,0.5), 0, 0, 0, 2);
    -fx-transition: all 0.3s ease;   /* p≈Çynna animacja */
}
/* Dodatkowy uchwyt graficzny dla lepszej widoczno≈õci */
.split-pane-divider > .grabber {
    -fx-background-color: rgba(255,255,255,0.7);
    -fx-background-radius: 1px;
    -fx-pref-width: 30px;
    -fx-pref-height: 3px;
}
#statusLabel {
    -fx-font-size: 14px;
    -fx-font-weight: bold;
    -fx-text-fill: #2ecc71; /* zachowanie zielonego koloru */
    -fx-padding: 5px 0; /* dodanie odstƒôpu wertykalnego */
}

/* Styl dla poziomego suwaka w ScrollPane (pod wykresem) */
.scroll-pane-for-chart .scroll-bar:horizontal {
    -fx-background-color: #34495e;
    -fx-background-insets: 0;
    -fx-background-radius: 0;
}

.scroll-pane-for-chart .scroll-bar:horizontal .thumb {
    -fx-background-color: #3498db;
    -fx-background-radius: 2px;
    -fx-border-color: #2980b9;
    -fx-border-width: 1px;
    -fx-border-radius: 2px;
}

.scroll-pane-for-chart .scroll-bar:horizontal .thumb:hover {
    -fx-background-color: #2980b9;
    -fx-border-color: #1c638e;
    -fx-effect: dropshadow(gaussian, rgba(41,128,185,0.5), 0, 0, 0, 2);
}

.scroll-pane-for-chart .scroll-bar:horizontal .increment-button,
.scroll-pane-for-chart .scroll-bar:horizontal .decrement-button {
    -fx-background-color: transparent;
    -fx-background-radius: 0;
    -fx-padding: 0;
}

.scroll-pane-for-chart .scroll-bar:horizontal .increment-arrow,
.scroll-pane-for-chart .scroll-bar:horizontal .decrement-arrow {
    -fx-shape: " ";
    -fx-padding: 0;
}
/* ===== STYLE DLA ZAK≈ÅADEK ===== */
.tab-pane {
    -fx-background-color: #34495e;
    -fx-tab-min-height: 45px;
    -fx-tab-max-height: 45px;
    -fx-padding: 0;
}

.tab-header-background {
    -fx-background-color: #2c3e50;
    -fx-border-color: #3498db;
    -fx-border-width: 0 0 2px 0;
}
.tab {
    -fx-background-color: #34495e;
    -fx-background-insets: 0, 0, 0;
    -fx-background-radius: 5px 5px 0 0;
    -fx-padding: 0 25px;
    -fx-border-width: 0;
    -fx-border-color:
            linear-gradient(to bottom, #85c1e9, #5dade2);
    -fx-cursor: hand;
}
.tab .tab-label {
    -fx-text-fill: #bdc3c7;
    -fx-font-weight: bold;
    -fx-font-size: 14px;
    -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.2), 0, 0, 0, 1);
}

.tab:selected {
    -fx-background-color: #3498db;
    -fx-background-radius: 5px 5px 0 0;
    -fx-background-insets: 0, 0 0 2px 0;
    -fx-border-width: 0;
}

.tab:selected .tab-label {
    -fx-text-fill: white;
    -fx-font-weight: bold;
    -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.4), 0, 0, 0, 2);
}

.tab:hover {
    -fx-background-color: #2980b9;
    -fx-background-radius: 5px 5px 0 0;
    -fx-border-width: 0;
}

.tab:hover .tab-label {
    -fx-text-fill: white;
}

/* Strza≈Çki przewijania zak≈Çadek */
.tab-pane > .tab-header-area > .headers-region > .tab > .tab-container > .tab-close-button {
    -fx-background-color: transparent;
}

/* Efekt "wci≈õniƒôcia" dla aktywnej zak≈Çadki */
.tab:selected:focused {
    -fx-background-color: #2980b9;
    -fx-background-insets: 0;
    -fx-border-insets: 0;
}
/* Strza≈Çki przewijania zak≈Çadek */
.tab-pane > .tab-header-area > .control-buttons-container > .tab-down-button {
    -fx-background-color: #3498db;
    -fx-background-radius: 3px;
}

.tab-pane > .tab-header-area > .control-buttons-container > .tab-down-button .arrow {
    -fx-background-color: white;
}
.tab-pane:focused > .tab-header-area > .headers-region > .tab:selected .focus-indicator {
    -fx-border-color: transparent;
    -fx-border-width: 0;
}
.tab-pane > .tab-header-area {
    -fx-border-color: #3498db;
    -fx-border-width: 0 0 2px 0;
    -fx-padding: 0;
}


åCIEØKA: src\main\resources\com\election\css\common-styles.css
-----------------------------------------------------------------
/* COMMON-STYLES.CSS */
/* Style wsp√≥≈Çdzielone miƒôdzy wszystkimi widokami */

/* Globalne */
.root-style, .header-style, .footer-style {
    -fx-background-color: #34495e;
}

.white-text, .panel-title, .app-title,
.form-label, .footer-text, .radio-button {
    -fx-text-fill: white;
}

/* Typografia */
.panel-title {
    -fx-font-size: 18px;
    -fx-font-weight: bold;
}

.app-title {
    -fx-font-size: 40px;
    -fx-font-weight: bold;
}

.form-label {
    -fx-font-size: 14px;
}

/* Przyciski */
.button {
    -fx-background-radius: 3px;
    -fx-transition: background-color 0.3s ease;
}
.button-logout {
    -fx-base: #e74c3c;
    -fx-text-fill: white;
    -fx-pref-height: 44px;
    -fx-min-width: 120px;
}
/* Efekt hover dla przycisku wylogowania */
.button-logout:hover {
    -fx-background-color: #c0392b;
    -fx-cursor: hand;
}
.button-action {
    -fx-font-size: 14px;
    -fx-pref-height: 44px;
    -fx-min-width: 120px;
    -fx-background-color: #3498db;
    -fx-text-fill: white;
}
/* Efekt hover dla niebieskich przycisk√≥w */
.button-action:hover {
    -fx-background-color: #2980b9;
    -fx-cursor: hand;
}

/* Statusy i komunikaty */
.status-label { -fx-text-fill: #2ecc71; }
.edit-status-label { -fx-text-fill: #f1c40f; }
.delete-status-label { -fx-text-fill: #e74c3c; }
.error-label {
    -fx-text-fill: #ff4444;
    -fx-font-size: 20px;
}

.status-label, .edit-status-label,
.delete-status-label {
    -fx-font-style: italic;
}

/* Kontenery */
.vbox-padding {
    -fx-padding: 20px;
}

.voting-container {
    -fx-background-color: #2c3e50;
    -fx-background-radius: 10px;
    -fx-border-color: rgba(255,255,255,0.3);
    -fx-border-radius: 10px;
    -fx-border-width: 1px;
    -fx-padding: 40px;
}

/* Formularze */
.form-hint {
    -fx-text-fill: #bdc3c7;
    -fx-font-size: 11px;
    -fx-font-style: italic;
}

.form-field, .hbox-password {
    -fx-pref-width: 250px;
    -fx-min-width: 250px;
    -fx-font-size: 20px;
}

.password-field, .text-field {
    -fx-font-size: 14px;
    -fx-min-height: 25px;
}

/* Przycisk oka */
.eye-button {
    -fx-background-color: #3498db;
    -fx-background-radius: 3px;
    -fx-padding: 4px;
    -fx-min-width: 30px;
    -fx-min-height: 30px;
}

.eye-button:hover {
    -fx-background-color: #2980b9;
}

.eye-button .image-view {
    -fx-fit-width: 20px;
    -fx-fit-height: 20px;
}

/* Stopka */
.footer-text {
    -fx-font-size: 24px;
    -fx-font-weight: bold;
}

/* Radio button */
.radio-button .radio {
    -fx-background-color: #ecf0f1;
    -fx-border-color: #bdc3c7;
    -fx-border-radius: 10px;
    -fx-background-radius: 10px;
}

.radio-button:selected .radio {
    -fx-background-color: #3498db;
}

.vote-status-label {
    -fx-text-fill: #2ecc71;
    -fx-font-size: 20px;
}


åCIEØKA: src\main\resources\com\election\css\login-styles.css
----------------------------------------------------------------
.root-style, .header-style, .footer-style {
    -fx-background-color: #34495e;
}

.app-title {
    -fx-font-size: 40px;
    -fx-font-weight: bold;
    -fx-text-fill: white;
}

.form-label {
    -fx-font-size: 14px;
    -fx-text-fill: white;
}

.form-field, .hbox-password, .button-login {
    -fx-min-width: 250px;
    -fx-pref-width: 250px;
}

.form-field, .hbox-password {
    -fx-font-size: 20px;
}

.button-login {
    -fx-font-size: 20px;
    -fx-pref-height: 44px;
    -fx-padding: 0 20px;
    -fx-background-color: #3498db;
    -fx-text-fill: white;
}
/* Efekt hover dla przycisk√≥w logowania */
.button-login:hover {
    -fx-background-color: #2980b9;
    -fx-cursor: hand;
}

.error-label {
    -fx-text-fill: #ff4444;
    -fx-font-size: 20px;
}

.eye-button {
    -fx-background-color: #3498db;
    -fx-background-radius: 3px;
    -fx-padding: 4px;
    -fx-min-width: 30px;
    -fx-min-height: 30px;
}

.eye-button:hover {
    -fx-background-color: #2980b9;
}
.root-style .text-field,
.root-style .password-field,
.root-style .eye-button {
    -fx-pref-height: 44px;
    -fx-min-height: 44px;
}

.root-style .eye-button {
    -fx-min-width: 44px;
    -fx-pref-width: 44px;
}


åCIEØKA: src\main\resources\com\election\css\user-styles.css
---------------------------------------------------------------
/* USER-STYLES.CSS */
/* Specyficzne style dla panelu u≈ºytkownika */

/* G≈Ç√≥wne kontenery */
.user-view-container {
    -fx-background-color: #2c3e50;
    -fx-background-radius: 10px;
    -fx-border-color: rgba(255,255,255,0.3);
    -fx-border-radius: 10px;
    -fx-border-width: 1px;
    -fx-padding: 25px;
}

.voting-container {
    -fx-background-color: #2c3e50;
    -fx-background-radius: 10px;
    -fx-border-color: rgba(255,255,255,0.3);
    -fx-border-radius: 10px;
    -fx-padding: 40px !important;
    -fx-spacing: 30px !important;
}

/* Teksty */
.user-view-text {
    -fx-text-fill: white !important;
}

.panel-title {
    -fx-font-size: 28px !important;
}

/* Przyciski */
.button-vote {
    -fx-font-size: 36px !important;
    -fx-base: #27ae60;
    -fx-pref-width: 450px;
    -fx-pref-height: 80px !important;
    -fx-text-fill: white;
    -fx-font-weight: bold;
}

#logoutButton {
    -fx-font-size: 18px !important;
    -fx-pref-width: 150px !important;
    -fx-pref-height: 50px !important;
    -fx-padding: 10px 20px !important;
}

/* Listy rozwijane */
.user-view-combo,
.candidate-combo {
    -fx-background-color: #34495e;
    -fx-text-fill: white;
    -fx-prompt-text-fill: rgba(255,255,255,0.7);
    -fx-pref-height: 70px;
    -fx-font-size: 28px;
}

.user-view-combo .list-cell,
.candidate-combo .list-cell {
    -fx-text-fill: white;
    -fx-background-color: #34495e;
}

.user-view-combo .list-view,
.candidate-combo .list-view {
    -fx-background-color: #34495e;
}

.user-view-combo .list-cell:filled:hover,
.candidate-combo .list-cell:filled:hover {
    -fx-background-color: #2c3e50;
}


åCIEØKA: src\main\resources\com\election\view\admin_view.fxml
----------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.chart.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.control.cell.PropertyValueFactory?>
<?import javafx.scene.layout.*?>

<?import java.net.URL?>
<?import javafx.collections.FXCollections?>
<?import java.lang.String?>
<?import javafx.geometry.Insets?>
<StackPane prefHeight="600" prefWidth="800" styleClass="root-style"
           xmlns="http://javafx.com/javafx/17.0.12"
           xmlns:fx="http://javafx.com/fxml/1"
           fx:controller="com.election.controller.AdminController">

    <stylesheets>
        <URL value="@../css/common-styles.css" />
        <URL value="@../css/admin-styles.css" />
    </stylesheets>

    <TabPane prefHeight="600" prefWidth="800" tabClosingPolicy="UNAVAILABLE">

        <!-- U≈ºytkownicy -->
        <Tab text="U≈ºytkownicy" onSelectionChanged="#handleUserTabSelected">
            <VBox spacing="10" styleClass="vbox-padding">
                <HBox spacing="10" alignment="CENTER_LEFT">
                    <Label styleClass="panel-title" text="Panel administratora" />
                </HBox>
                <HBox spacing="5" alignment="CENTER_LEFT">
                    <Label styleClass="form-label" text="Filtry:"/>
                    <TextField fx:id="firstNameFilter" prefWidth="100" promptText="Imiƒô"/>
                    <TextField fx:id="lastNameFilter" prefWidth="100" promptText="Nazwisko"/>
                    <TextField fx:id="peselFilter" prefWidth="120" promptText="PESEL"/>
                    <ComboBox fx:id="roleFilterComboBox" prefWidth="80" promptText="Rola"/>
                    <Button text="Filtruj" prefWidth="80" onAction="#handleFilterUsers"/>
                    <Button text="Wyczy≈õƒá" prefWidth="80" onAction="#handleClearFilters"/>
                </HBox>

                <TableView fx:id="usersTable" maxHeight="80" styleClass="compact-table">
                    <columns>
                        <TableColumn fx:id="idColumn" prefWidth="30" text="ID" /> <!-- Mniejsza szeroko≈õƒá -->
                        <TableColumn fx:id="usernameColumn" prefWidth="70" text="Login" /> <!-- Mniejsza szeroko≈õƒá -->
                        <TableColumn fx:id="roleColumn" prefWidth="50" text="Rola" /> <!-- Mniejsza szeroko≈õƒá -->
                        <TableColumn fx:id="firstNameColumn" prefWidth="80" text="Imiƒô" /> <!-- Mniejsza szeroko≈õƒá -->
                        <TableColumn fx:id="lastNameColumn" prefWidth="80" text="Nazwisko" /> <!-- Mniejsza szeroko≈õƒá -->
                        <TableColumn fx:id="peselColumn" prefWidth="100" text="PESEL" /> <!-- Mniejsza szeroko≈õƒá -->
                    </columns>
                </TableView>

                <GridPane fx:id="userFormGrid" hgap="5" vgap="5">
                    <Label styleClass="form-label" text="Imiƒô:*" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                    <TextField fx:id="firstNameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                    <Label styleClass="form-hint" text="Tylko litery ma≈Çe (a-z) oraz litery du≈ºe (A-Z)" GridPane.columnIndex="2" GridPane.rowIndex="0" />

                    <Label styleClass="form-label" text="Nazwisko:*" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                    <TextField fx:id="lastNameField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
                    <Label styleClass="form-hint" text="Tylko litery ma≈Çe (a-z) oraz litery du≈ºe (A-Z)" GridPane.columnIndex="2" GridPane.rowIndex="1" />

                    <Label styleClass="form-label" text="PESEL:*" GridPane.columnIndex="0" GridPane.rowIndex="2" />
                    <TextField fx:id="peselField" GridPane.columnIndex="1" GridPane.rowIndex="2" />
                    <Label styleClass="form-hint" text="11 cyfr" GridPane.columnIndex="2" GridPane.rowIndex="2" />

                    <Label styleClass="form-label" text="Login:*" GridPane.columnIndex="0" GridPane.rowIndex="3" />
                    <TextField fx:id="usernameField" GridPane.columnIndex="1" GridPane.rowIndex="3" />
                    <Label styleClass="form-hint" text="Tylko litery ma≈Çe (a-z), litery du≈ºe (A-Z), cyfry (0-9) i znak (_)" GridPane.columnIndex="2" GridPane.rowIndex="3" />

                    <Label styleClass="form-label" text="Has≈Ço:*" GridPane.columnIndex="0" GridPane.rowIndex="4" />
                    <HBox GridPane.columnIndex="1" GridPane.rowIndex="4">
                        <PasswordField fx:id="passwordField" HBox.hgrow="ALWAYS" />
                        <TextField fx:id="visiblePasswordField" HBox.hgrow="ALWAYS" visible="false" managed="false" />
                        <Button fx:id="showPasswordButton" styleClass="eye-button" onAction="#togglePasswordVisibility" />
                    </HBox>
<!--                    <Label styleClass="form-hint" text="Nie mo≈ºe byƒá puste" GridPane.columnIndex="2" GridPane.rowIndex="4" />-->

                    <Label styleClass="form-label" text="Rola:*" GridPane.columnIndex="0" GridPane.rowIndex="5" />
                    <ComboBox fx:id="roleComboBox" GridPane.columnIndex="1" GridPane.rowIndex="5" value="USER">
                        <items>
                            <FXCollections fx:factory="observableArrayList">
                                <String fx:value="USER"/>
                                <String fx:value="ADMIN"/>
                            </FXCollections>
                        </items>
                    </ComboBox>
                </GridPane>

                <HBox spacing="10" alignment="CENTER">
                    <Button text="Dodaj nowego" onAction="#handleAddUser" styleClass="button-add" />
                    <Button text="Zapisz zmiany" onAction="#handleUpdateUser" styleClass="button-save" />
                    <Button text="Usu≈Ñ u≈ºytkownika" onAction="#handleDeleteUser" styleClass="button-delete" />
                    <Button text="Wyczy≈õƒá formularz" onAction="#handleClearUserForm" />
                </HBox>

                <Label fx:id="userManagementStatus" styleClass="status-label" />
            </VBox>
        </Tab>
        <!-- Zak≈Çadka Kandydaci -->
        <Tab text="Kandydaci">
            <VBox styleClass="vbox-padding" spacing="10">
                <Label styleClass="panel-title" text="ZarzƒÖdzanie kandydatami" />

                <!-- Tabela kandydat√≥w -->
                <TableView fx:id="candidatesTable" prefHeight="200">
                    <columns>
                        <TableColumn fx:id="candidateIdColumn" prefWidth="50" text="ID" />
                        <TableColumn fx:id="candidateNameColumn" prefWidth="200" text="Imiƒô i nazwisko" />
                        <TableColumn fx:id="candidatePartyColumn" prefWidth="150" text="Partia" />
                        <TableColumn fx:id="candidateVotesColumn" prefWidth="100" text="G≈Çosy" />
                    </columns>
                </TableView>

                <!-- Formularz -->
                <GridPane hgap="15" vgap="15" prefHeight="100">
                    <Label styleClass="form-label" text="Imiƒô i nazwisko:*" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                    <TextField fx:id="candidateNameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                    <Label styleClass="form-hint" text="Wymagane" GridPane.columnIndex="2" GridPane.rowIndex="0" />

                    <Label styleClass="form-label" text="Partia:*" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                    <TextField fx:id="candidatePartyField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
                    <Label styleClass="form-hint" text="Wymagane" GridPane.columnIndex="2" GridPane.rowIndex="1" />
                </GridPane>

                <!-- Przyciski akcji -->
                <HBox spacing="20" prefHeight="40">
                    <Button text="Dodaj" onAction="#handleAddCandidate" />
                    <Button text="Edytuj" onAction="#handleUpdateCandidate" />
                    <Button text="Usu≈Ñ" onAction="#handleDeleteCandidate" />
                    <Button text="Od≈õwie≈º" onAction="#handleRefreshCandidates" />
                    <Button text="Wyczy≈õƒá formularz" onAction="#handleClearCandidateForm" />
                </HBox>

                <Label fx:id="candidateStatusLabel" styleClass="status-label" />
            </VBox>
        </Tab>
        <!-- Wyniki wybor√≥w -->
        <Tab text="Wyniki wybor√≥w">
            <VBox spacing="5" styleClass="vbox-padding root-style">
                <Label styleClass="panel-title" text="Aktualne wyniki wybor√≥w" />

                <!-- SplitPane z t≈Çem -->
                <SplitPane dividerPositions="0.5" orientation="HORIZONTAL" prefHeight="450" styleClass="split-pane-bg">
                    <!-- Tabela z minimalnƒÖ szeroko≈õciƒÖ -->
                    <TableView fx:id="resultsTable" prefHeight="400" styleClass="results-table" minWidth="350.0">
                        <columns>
                            <TableColumn fx:id="candidateColumn" prefWidth="145" minWidth="120" text="Kandydat">
                                <cellValueFactory>
                                    <PropertyValueFactory property="name" />
                                </cellValueFactory>
                            </TableColumn>
                            <TableColumn fx:id="partyColumn" prefWidth="90" minWidth="80" text="Partia">
                                <cellValueFactory>
                                    <PropertyValueFactory property="party" />
                                </cellValueFactory>
                            </TableColumn>
                            <TableColumn fx:id="votesColumn" prefWidth="70" minWidth="70">
                                <graphic>
                                    <VBox alignment="CENTER" spacing="0" prefHeight="40">
                                        <Label text="Liczba" styleClass="column-header-label" wrapText="true" maxHeight="Infinity"/>
                                        <Label text="g≈Ços√≥w" styleClass="column-header-label" wrapText="true" maxHeight="Infinity"/>
                                    </VBox>
                                </graphic>
                                <cellValueFactory>
                                    <PropertyValueFactory property="votes" />
                                </cellValueFactory>
                            </TableColumn>
                            <TableColumn fx:id="percentColumn" prefWidth="60" minWidth="60" text="Procent"/>
                        </columns>
                    </TableView>

                    <!-- Wykres z minimalnƒÖ szeroko≈õciƒÖ -->
                    <ScrollPane fitToHeight="true" hbarPolicy="AS_NEEDED" vbarPolicy="NEVER" styleClass="scroll-pane-for-chart">
                        <BarChart fx:id="resultsChart" prefHeight="450" styleClass="results-chart"
                                  minWidth="300.0" minHeight="400" legendVisible="false"
                                  title="G≈Çosy wed≈Çug kandydata">
                            <xAxis>
                                <CategoryAxis fx:id="xAxis" side="BOTTOM" />
                            </xAxis>
                            <yAxis>
                                <NumberAxis fx:id="yAxis" label="Liczba g≈Ços√≥w" />
                            </yAxis>
                        </BarChart>
                    </ScrollPane>
                </SplitPane>

                <!-- Uk≈Çad przycisk√≥w w dw√≥ch wierszach -->
                <VBox spacing="5">
                    <HBox spacing="10" alignment="CENTER_LEFT">
                        <Button styleClass="button-refresh" onAction="#refreshResults" text="Od≈õwie≈º wyniki" />
                        <Button styleClass="button-export" onAction="#handleExportToCSV" text="Eksportuj do CSV" />
                        <Button styleClass="button-export" onAction="#handleExportToPDF" text="Eksportuj do PDF" />
                        <Button styleClass="button-logout" onAction="#handleLogout" text="Wyloguj" />
                    </HBox>
                </VBox>

                <!-- Etykieta statusu -->
                <Label fx:id="statusLabel" styleClass="status-label" wrapText="true" maxWidth="Infinity" />
            </VBox>
        </Tab>

        <!-- Narzƒôdzia -->
        <Tab text="Narzƒôdzia">
            <VBox spacing="10" styleClass="vbox-padding" prefHeight="250">
                <Label styleClass="panel-title" text="Narzƒôdzia administratora" />
                <VBox alignment="CENTER" spacing="30" styleClass="tools-container" prefHeight="150">
                    <Button styleClass="button-generate" prefWidth="300" prefHeight="50" onAction="#handleOpenHashGenerator" text="Otw√≥rz Generator Hashy" />
                    <Button styleClass="button-logout" prefWidth="300" prefHeight="50" onAction="#handleLogout" text="Wyloguj" />
                </VBox>
            </VBox>
        </Tab>
    </TabPane>
</StackPane>


åCIEØKA: src\main\resources\com\election\view\login.fxml
-----------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import java.net.URL?>

<BorderPane prefHeight="600.0" prefWidth="800.0"
            xmlns="http://javafx.com/javafx/17.0.12"
            xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.election.controller.LoginController">

    <stylesheets>
        <URL value="@../css/common-styles.css" />
        <URL value="@../css/login-styles.css" />
    </stylesheets>

    <center>
        <VBox styleClass="root-style" alignment="CENTER" spacing="20">
            <Label styleClass="app-title" text="Wybory prezydenckie" />

            <GridPane alignment="CENTER" hgap="10" vgap="10">
                <columnConstraints>
                    <ColumnConstraints halignment="RIGHT" />
                    <ColumnConstraints />
                </columnConstraints>

                <rowConstraints>
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                </rowConstraints>

                <Label styleClass="form-label" text="Login:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                <TextField fx:id="usernameField" styleClass="form-field" promptText="Wprowad≈∫ login" GridPane.columnIndex="1" GridPane.rowIndex="0" />

                <Label styleClass="form-label" text="Has≈Ço:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                <HBox alignment="CENTER_LEFT" GridPane.columnIndex="1" GridPane.rowIndex="1">
                    <PasswordField fx:id="passwordField" styleClass="form-field" promptText="Wprowad≈∫ has≈Ço" HBox.hgrow="ALWAYS" />
                    <TextField fx:id="visiblePasswordField" styleClass="form-field" promptText="Wprowad≈∫ has≈Ço" HBox.hgrow="ALWAYS" visible="false" managed="false" />
                    <Button fx:id="showPasswordButton" styleClass="eye-button" onAction="#togglePasswordVisibility" />
                </HBox>

                <VBox alignment="CENTER" GridPane.columnIndex="1" GridPane.rowIndex="2">
                    <!-- Dodajemy min-width i max-width -->
                    <Button styleClass="button-login" onAction="#handleLogin" text="Zaloguj"
                            minWidth="250" maxWidth="Infinity" />
                </VBox>
            </GridPane>

            <VBox alignment="CENTER" spacing="10">
                <Label fx:id="errorLabel" styleClass="error-label" />
            </VBox>
        </VBox>
    </center>
</BorderPane>


åCIEØKA: src\main\resources\com\election\view\user_view.fxml
---------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import java.net.URL?>

<BorderPane prefHeight="600" prefWidth="800" styleClass="root-style"
            xmlns="http://javafx.com/javafx/17.0.12"
            xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.election.controller.UserController">

    <stylesheets>
        <URL value="@../css/common-styles.css" />
        <URL value="@../css/user-styles.css" />
    </stylesheets>

    <top>
        <VBox alignment="CENTER" prefWidth="800.0" spacing="20" style="-fx-background-color: #34495e;">
            <HBox styleClass="header-style" alignment="CENTER_RIGHT">
                <Button fx:id="logoutButton" styleClass="button-logout" onAction="#handleLogout" text="Wyloguj" />
            </HBox>

            <VBox styleClass="voting-container" alignment="CENTER" spacing="20"
                  style="-fx-background-color: #2c3e50; -fx-background-radius: 10px; -fx-padding: 40px;">
                <Label styleClass="panel-title" text="Witaj w systemie g≈Çosowania!"
                       style="-fx-text-fill: white; -fx-font-size: 28px;" />

                <Label text="Wybierz kandydata:"
                       style="-fx-text-fill: white; -fx-font-size: 22px;" />

                <ComboBox fx:id="candidateComboBox" styleClass="candidate-combo" promptText="Kliknij, aby wybraƒá..."
                          style="-fx-background-color: #34495e; -fx-text-fill: white; -fx-pref-height: 70px; -fx-font-size: 28px;"/>

                <Button fx:id="submitButton" styleClass="button-vote" onAction="#handleVoteSubmit" text="Oddaj g≈Ços"
                        style="-fx-text-fill: white; -fx-font-weight: bold; -fx-font-size: 36px;" />

                <Label fx:id="statusLabel" styleClass="status-label" wrapText="true"
                       style="-fx-text-fill: white; -fx-font-size: 20px;" />
            </VBox>
        </VBox>
    </top>
    <bottom>
        <HBox styleClass="footer-style" alignment="CENTER">
            <Label styleClass="footer-text" text="Wybory prezydenckie 2025" />
        </HBox>
    </bottom>
</BorderPane>
